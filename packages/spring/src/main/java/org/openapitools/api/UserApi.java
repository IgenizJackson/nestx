/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ChangePasswordReq;
import org.openapitools.model.CreateUserReq;
import org.openapitools.model.EditProfileReq;
import org.openapitools.model.EditUserReq;
import org.openapitools.model.KeyValueDto;
import org.openapitools.model.Result;
import org.openapitools.model.ResultListUser;
import org.openapitools.model.User;
import org.openapitools.model.UserRes;
import org.openapitools.model.UsersOfRole;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-04-21T15:04:16.680Z[Etc/UTC]")

@Validated
@Api(value = "user", description = "the user API")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "", nickname = "usersAddUsersToRole", notes = "", response = Result.class, tags={ "core", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Result.class) })
    @RequestMapping(value = "/user/role",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Result> usersAddUsersToRole(@ApiParam(value = "" ,required=true )  @Valid @RequestBody UsersOfRole usersOfRole) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"ok\" : true,  \"message\" : \"message\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "usersChangePassword", notes = "", response = Result.class, tags={ "core", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Result.class) })
    @RequestMapping(value = "/user/password",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Result> usersChangePassword(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ChangePasswordReq changePasswordReq) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"ok\" : true,  \"message\" : \"message\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "usersCreate", notes = "", response = UserRes.class, tags={ "core", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = UserRes.class) })
    @RequestMapping(value = "/user/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<UserRes> usersCreate(@ApiParam(value = "" ,required=true )  @Valid @RequestBody CreateUserReq createUserReq) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"siteUrl\" : \"siteUrl\",  \"address\" : \"address\",  \"roles\" : [ \"roles\", \"roles\" ],  \"mobile\" : \"mobile\",  \"avatar\" : \"avatar\",  \"isAdmin\" : true,  \"expired\" : 0.80082819046101150206595775671303272247314453125,  \"name\" : \"name\",  \"company\" : \"company\",  \"id\" : \"id\",  \"isApproved\" : true,  \"email\" : \"email\",  \"username\" : \"username\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "usersFindOne", notes = "", response = UserRes.class, tags={ "core", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = UserRes.class) })
    @RequestMapping(value = "/user/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<UserRes> usersFindOne(@ApiParam(value = "",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"siteUrl\" : \"siteUrl\",  \"address\" : \"address\",  \"roles\" : [ \"roles\", \"roles\" ],  \"mobile\" : \"mobile\",  \"avatar\" : \"avatar\",  \"isAdmin\" : true,  \"expired\" : 0.80082819046101150206595775671303272247314453125,  \"name\" : \"name\",  \"company\" : \"company\",  \"id\" : \"id\",  \"isApproved\" : true,  \"email\" : \"email\",  \"username\" : \"username\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "usersProfile", notes = "", response = User.class, tags={ "core", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = User.class) })
    @RequestMapping(value = "/user/profile",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<User> usersProfile() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"roles\" : [ \"roles\", \"roles\" ],  \"profile\" : \"{}\",  \"mobile\" : \"mobile\",  \"groups\" : [ \"groups\", \"groups\" ],  \"avatar\" : \"avatar\",  \"isAdmin\" : true,  \"secret\" : \"secret\",  \"type\" : \"type\",  \"isDisable\" : true,  \"password\" : \"password\",  \"expired\" : 0.80082819046101150206595775671303272247314453125,  \"name\" : \"name\",  \"id\" : \"id\",  \"keyword\" : \"keyword\",  \"isApproved\" : true,  \"email\" : \"email\",  \"username\" : \"username\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "usersQuery", notes = "", response = ResultListUser.class, tags={ "core", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ResultListUser.class) })
    @RequestMapping(value = "/user/query",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResultListUser> usersQuery(@ApiParam(value = "") @Valid @RequestParam(value = "keyword", required = false) String keyword,@ApiParam(value = "") @Valid @RequestParam(value = "group", required = false) String group,@ApiParam(value = "") @Valid @RequestParam(value = "role", required = false) String role,@ApiParam(value = "", defaultValue = "1.0d") @Valid @RequestParam(value = "page", required = false, defaultValue="1.0d") Double page,@ApiParam(value = "", defaultValue = "10.0d") @Valid @RequestParam(value = "size", required = false, defaultValue="10.0d") Double size,@ApiParam(value = "") @Valid @RequestParam(value = "sort", required = false) String sort) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"query\" : {    \"size\" : 6.02745618307040320615897144307382404804229736328125,    \"page\" : 1.46581298050294517310021547018550336360931396484375  },  \"count\" : 0.80082819046101150206595775671303272247314453125,  \"list\" : [ {    \"roles\" : [ \"roles\", \"roles\" ],    \"profile\" : \"{}\",    \"mobile\" : \"mobile\",    \"groups\" : [ \"groups\", \"groups\" ],    \"avatar\" : \"avatar\",    \"isAdmin\" : true,    \"secret\" : \"secret\",    \"type\" : \"type\",    \"isDisable\" : true,    \"password\" : \"password\",    \"expired\" : 0.80082819046101150206595775671303272247314453125,    \"name\" : \"name\",    \"id\" : \"id\",    \"keyword\" : \"keyword\",    \"isApproved\" : true,    \"email\" : \"email\",    \"username\" : \"username\"  }, {    \"roles\" : [ \"roles\", \"roles\" ],    \"profile\" : \"{}\",    \"mobile\" : \"mobile\",    \"groups\" : [ \"groups\", \"groups\" ],    \"avatar\" : \"avatar\",    \"isAdmin\" : true,    \"secret\" : \"secret\",    \"type\" : \"type\",    \"isDisable\" : true,    \"password\" : \"password\",    \"expired\" : 0.80082819046101150206595775671303272247314453125,    \"name\" : \"name\",    \"id\" : \"id\",    \"keyword\" : \"keyword\",    \"isApproved\" : true,    \"email\" : \"email\",    \"username\" : \"username\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "usersRemoveAccountFromRole", notes = "", response = Result.class, tags={ "core", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Result.class) })
    @RequestMapping(value = "/user/role",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Result> usersRemoveAccountFromRole(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "role", required = true) String role,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "id", required = true) String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"ok\" : true,  \"message\" : \"message\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "usersSearch", notes = "", response = KeyValueDto.class, responseContainer = "List", tags={ "core", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = KeyValueDto.class, responseContainer = "List") })
    @RequestMapping(value = "/user/search",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<KeyValueDto>> usersSearch(@ApiParam(value = "") @Valid @RequestParam(value = "keyword", required = false) String keyword,@ApiParam(value = "") @Valid @RequestParam(value = "value", required = false) String value) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"label\" : \"label\",  \"value\" : \"value\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "usersUpdate", notes = "", response = UserRes.class, tags={ "core", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = UserRes.class) })
    @RequestMapping(value = "/user/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<UserRes> usersUpdate(@ApiParam(value = "" ,required=true )  @Valid @RequestBody EditUserReq editUserReq) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"siteUrl\" : \"siteUrl\",  \"address\" : \"address\",  \"roles\" : [ \"roles\", \"roles\" ],  \"mobile\" : \"mobile\",  \"avatar\" : \"avatar\",  \"isAdmin\" : true,  \"expired\" : 0.80082819046101150206595775671303272247314453125,  \"name\" : \"name\",  \"company\" : \"company\",  \"id\" : \"id\",  \"isApproved\" : true,  \"email\" : \"email\",  \"username\" : \"username\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "usersUpdateProfile", notes = "", response = UserRes.class, tags={ "core", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = UserRes.class) })
    @RequestMapping(value = "/user/profile",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<UserRes> usersUpdateProfile(@ApiParam(value = "" ,required=true )  @Valid @RequestBody EditProfileReq editProfileReq) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"siteUrl\" : \"siteUrl\",  \"address\" : \"address\",  \"roles\" : [ \"roles\", \"roles\" ],  \"mobile\" : \"mobile\",  \"avatar\" : \"avatar\",  \"isAdmin\" : true,  \"expired\" : 0.80082819046101150206595775671303272247314453125,  \"name\" : \"name\",  \"company\" : \"company\",  \"id\" : \"id\",  \"isApproved\" : true,  \"email\" : \"email\",  \"username\" : \"username\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
