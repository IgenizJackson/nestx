// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * rest api interface
 * 项目标准接口
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as url from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';

const BASE_PATH = 'http://localhost'.replace(/\/+$/, '');

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ',',
  ssv: ' ',
  tsv: '\t',
  pipes: '|',
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
  url: string;
  options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration: Configuration | undefined;

  constructor(
    configuration?: Configuration,
    protected basePath: string = BASE_PATH,
    protected axios: AxiosInstance = globalAxios,
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  name: 'RequiredError' = 'RequiredError';
  constructor(public field: string, msg?: string) {
    super(msg);
  }
}

/**
 *
 * @export
 * @interface CreateDictReq
 */
export interface CreateDictReq {
  /**
   *
   * @type {string}
   * @memberof CreateDictReq
   */
  category: string;
  /**
   *
   * @type {string}
   * @memberof CreateDictReq
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CreateDictReq
   */
  translate: string;
  /**
   *
   * @type {any}
   * @memberof CreateDictReq
   */
  expand: any;
}

/**
 *
 * @export
 * @interface CreateMenuReq
 */
export interface CreateMenuReq {
  /**
   *
   * @type {string}
   * @memberof CreateMenuReq
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CreateMenuReq
   */
  slug: string;
  /**
   *
   * @type {boolean}
   * @memberof CreateMenuReq
   */
  group: boolean;
  /**
   *
   * @type {string}
   * @memberof CreateMenuReq
   */
  link: string;
  /**
   *
   * @type {number}
   * @memberof CreateMenuReq
   */
  order: number;
  /**
   *
   * @type {string}
   * @memberof CreateMenuReq
   */
  externalLink: string;
  /**
   *
   * @type {boolean}
   * @memberof CreateMenuReq
   */
  blank: boolean;
  /**
   *
   * @type {string}
   * @memberof CreateMenuReq
   */
  icon: string;
  /**
   *
   * @type {string}
   * @memberof CreateMenuReq
   */
  badge: string;
  /**
   *
   * @type {string}
   * @memberof CreateMenuReq
   */
  badgeDot: string;
  /**
   *
   * @type {string}
   * @memberof CreateMenuReq
   */
  badgeStatus: string;
  /**
   *
   * @type {boolean}
   * @memberof CreateMenuReq
   */
  enable: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CreateMenuReq
   */
  expanded: boolean;
  /**
   *
   * @type {string}
   * @memberof CreateMenuReq
   */
  acl: string;
  /**
   *
   * @type {Array<any>}
   * @memberof CreateMenuReq
   */
  paths: Array<any>;
  /**
   *
   * @type {string}
   * @memberof CreateMenuReq
   */
  parent: string;
  /**
   *
   * @type {Array<any>}
   * @memberof CreateMenuReq
   */
  permissions?: Array<any>;
  /**
   *
   * @type {boolean}
   * @memberof CreateMenuReq
   */
  isMenu: boolean;
}

/**
 *
 * @export
 * @interface CreateNoticeReq
 */
export interface CreateNoticeReq {
  /**
   *
   * @type {string}
   * @memberof CreateNoticeReq
   */
  category: string;
  /**
   *
   * @type {string}
   * @memberof CreateNoticeReq
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CreateNoticeReq
   */
  translate: string;
  /**
   *
   * @type {any}
   * @memberof CreateNoticeReq
   */
  expand: any;
}

/**
 *
 * @export
 * @interface CreateProductDto
 */
export interface CreateProductDto {
  /**
   *
   * @type {string}
   * @memberof CreateProductDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CreateProductDto
   */
  title: string;
}

/**
 *
 * @export
 * @interface CreateUserReq
 */
export interface CreateUserReq {
  /**
   *
   * @type {string}
   * @memberof CreateUserReq
   */
  username: string;
  /**
   *
   * @type {string}
   * @memberof CreateUserReq
   */
  password: string;
}

/**
 *
 * @export
 * @interface Dict
 */
export interface Dict {
  /**
   *
   * @type {string}
   * @memberof Dict
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof Dict
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof Dict
   */
  category: string;
  /**
   *
   * @type {string}
   * @memberof Dict
   */
  translate: string;
  /**
   *
   * @type {any}
   * @memberof Dict
   */
  expand: any;
}

/**
 *
 * @export
 * @interface EditDictReq
 */
export interface EditDictReq {
  /**
   *
   * @type {string}
   * @memberof EditDictReq
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof EditDictReq
   */
  category: string;
  /**
   *
   * @type {string}
   * @memberof EditDictReq
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof EditDictReq
   */
  translate: string;
  /**
   *
   * @type {any}
   * @memberof EditDictReq
   */
  expand: any;
}

/**
 *
 * @export
 * @interface EditMenuReq
 */
export interface EditMenuReq {
  /**
   *
   * @type {string}
   * @memberof EditMenuReq
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof EditMenuReq
   */
  slug: string;
  /**
   *
   * @type {boolean}
   * @memberof EditMenuReq
   */
  group: boolean;
  /**
   *
   * @type {string}
   * @memberof EditMenuReq
   */
  link: string;
  /**
   *
   * @type {number}
   * @memberof EditMenuReq
   */
  order: number;
  /**
   *
   * @type {string}
   * @memberof EditMenuReq
   */
  externalLink: string;
  /**
   *
   * @type {boolean}
   * @memberof EditMenuReq
   */
  blank: boolean;
  /**
   *
   * @type {string}
   * @memberof EditMenuReq
   */
  icon: string;
  /**
   *
   * @type {string}
   * @memberof EditMenuReq
   */
  badge: string;
  /**
   *
   * @type {string}
   * @memberof EditMenuReq
   */
  badgeDot: string;
  /**
   *
   * @type {string}
   * @memberof EditMenuReq
   */
  badgeStatus: string;
  /**
   *
   * @type {boolean}
   * @memberof EditMenuReq
   */
  enable: boolean;
  /**
   *
   * @type {boolean}
   * @memberof EditMenuReq
   */
  expanded: boolean;
  /**
   *
   * @type {string}
   * @memberof EditMenuReq
   */
  acl: string;
  /**
   *
   * @type {Array<any>}
   * @memberof EditMenuReq
   */
  paths: Array<any>;
  /**
   *
   * @type {string}
   * @memberof EditMenuReq
   */
  parent: string;
  /**
   *
   * @type {Array<any>}
   * @memberof EditMenuReq
   */
  permissions?: Array<any>;
  /**
   *
   * @type {boolean}
   * @memberof EditMenuReq
   */
  isMenu: boolean;
}

/**
 *
 * @export
 * @interface EditNoticeReq
 */
export interface EditNoticeReq {
  /**
   *
   * @type {string}
   * @memberof EditNoticeReq
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof EditNoticeReq
   */
  category: string;
  /**
   *
   * @type {string}
   * @memberof EditNoticeReq
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof EditNoticeReq
   */
  translate: string;
  /**
   *
   * @type {any}
   * @memberof EditNoticeReq
   */
  expand: any;
}

/**
 *
 * @export
 * @interface EditUserReq
 */
export interface EditUserReq {
  /**
   *
   * @type {string}
   * @memberof EditUserReq
   */
  name: string;
  /**
   *
   * @type {number}
   * @memberof EditUserReq
   */
  mobile: number;
  /**
   *
   * @type {string}
   * @memberof EditUserReq
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof EditUserReq
   */
  company?: string;
  /**
   *
   * @type {string}
   * @memberof EditUserReq
   */
  siteUrl?: string;
  /**
   *
   * @type {string}
   * @memberof EditUserReq
   */
  address?: string;
}

/**
 *
 * @export
 * @interface KeyValueDto
 */
export interface KeyValueDto {
  /**
   *
   * @type {string}
   * @memberof KeyValueDto
   */
  label: string;
  /**
   *
   * @type {string}
   * @memberof KeyValueDto
   */
  value: string;
}

/**
 *
 * @export
 * @interface Log
 */
export interface Log {
  /**
   *
   * @type {string}
   * @memberof Log
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof Log
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof Log
   */
  operator: string;
  /**
   *
   * @type {string}
   * @memberof Log
   */
  operatorIp: string;
  /**
   *
   * @type {string}
   * @memberof Log
   */
  operation: string;
  /**
   *
   * @type {string}
   * @memberof Log
   */
  comment: string;
  /**
   *
   * @type {Date}
   * @memberof Log
   */
  createdAt: Date;
}

/**
 *
 * @export
 * @interface LoginReq
 */
export interface LoginReq {
  /**
   *
   * @type {string}
   * @memberof LoginReq
   */
  username: string;
  /**
   *
   * @type {string}
   * @memberof LoginReq
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof LoginReq
   */
  password: string;
}

/**
 *
 * @export
 * @interface Menu
 */
export interface Menu {
  /**
   *
   * @type {string}
   * @memberof Menu
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof Menu
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof Menu
   */
  slug: string;
  /**
   *
   * @type {boolean}
   * @memberof Menu
   */
  group: boolean;
  /**
   *
   * @type {string}
   * @memberof Menu
   */
  link: string;
  /**
   *
   * @type {number}
   * @memberof Menu
   */
  order: number;
  /**
   *
   * @type {string}
   * @memberof Menu
   */
  externalLink: string;
  /**
   *
   * @type {boolean}
   * @memberof Menu
   */
  blank: boolean;
  /**
   *
   * @type {string}
   * @memberof Menu
   */
  icon: string;
  /**
   *
   * @type {string}
   * @memberof Menu
   */
  badge: string;
  /**
   *
   * @type {string}
   * @memberof Menu
   */
  badgeDot: string;
  /**
   *
   * @type {string}
   * @memberof Menu
   */
  badgeStatus: string;
  /**
   *
   * @type {boolean}
   * @memberof Menu
   */
  enable: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Menu
   */
  expanded: boolean;
  /**
   *
   * @type {string}
   * @memberof Menu
   */
  acl: string;
  /**
   *
   * @type {Array<any>}
   * @memberof Menu
   */
  paths: Array<any>;
  /**
   *
   * @type {any}
   * @memberof Menu
   */
  parent: any;
  /**
   *
   * @type {Array<any>}
   * @memberof Menu
   */
  permissions?: Array<any>;
  /**
   *
   * @type {boolean}
   * @memberof Menu
   */
  isMenu: boolean;
}

/**
 *
 * @export
 * @interface Notice
 */
export interface Notice {
  /**
   *
   * @type {string}
   * @memberof Notice
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof Notice
   */
  avatar: string;
  /**
   *
   * @type {string}
   * @memberof Notice
   */
  title: string;
  /**
   *
   * @type {Date}
   * @memberof Notice
   */
  datetime: Date;
  /**
   *
   * @type {string}
   * @memberof Notice
   */
  type: string;
  /**
   *
   * @type {boolean}
   * @memberof Notice
   */
  read: boolean;
}

/**
 *
 * @export
 * @interface Product
 */
export interface Product {
  /**
   *
   * @type {string}
   * @memberof Product
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  title: string;
}

/**
 *
 * @export
 * @interface Query
 */
export interface Query {
  /**
   *
   * @type {number}
   * @memberof Query
   */
  size: number;
  /**
   *
   * @type {number}
   * @memberof Query
   */
  index: number;
}

/**
 *
 * @export
 * @interface RegisterReq
 */
export interface RegisterReq {
  /**
   *
   * @type {string}
   * @memberof RegisterReq
   */
  username: string;
  /**
   *
   * @type {string}
   * @memberof RegisterReq
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof RegisterReq
   */
  mobile: string;
  /**
   *
   * @type {string}
   * @memberof RegisterReq
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof RegisterReq
   */
  mobilePrefix: string;
  /**
   *
   * @type {string}
   * @memberof RegisterReq
   */
  veryCode: string;
}

/**
 *
 * @export
 * @interface Result
 */
export interface Result {
  /**
   *
   * @type {boolean}
   * @memberof Result
   */
  ok: boolean;
}

/**
 *
 * @export
 * @interface ResultListDict
 */
export interface ResultListDict {
  /**
   *
   * @type {Array<Dict>}
   * @memberof ResultListDict
   */
  list: Array<Dict>;
  /**
   *
   * @type {number}
   * @memberof ResultListDict
   */
  count?: number;
  /**
   *
   * @type {Query}
   * @memberof ResultListDict
   */
  query?: Query;
}

/**
 *
 * @export
 * @interface ResultListLog
 */
export interface ResultListLog {
  /**
   *
   * @type {Array<Log>}
   * @memberof ResultListLog
   */
  list: Array<Log>;
  /**
   *
   * @type {number}
   * @memberof ResultListLog
   */
  count?: number;
  /**
   *
   * @type {Query}
   * @memberof ResultListLog
   */
  query?: Query;
}

/**
 *
 * @export
 * @interface ResultListMenu
 */
export interface ResultListMenu {
  /**
   *
   * @type {Array<Menu>}
   * @memberof ResultListMenu
   */
  list: Array<Menu>;
  /**
   *
   * @type {number}
   * @memberof ResultListMenu
   */
  count?: number;
  /**
   *
   * @type {Query}
   * @memberof ResultListMenu
   */
  query?: Query;
}

/**
 *
 * @export
 * @interface ResultListNotice
 */
export interface ResultListNotice {
  /**
   *
   * @type {Array<Notice>}
   * @memberof ResultListNotice
   */
  list: Array<Notice>;
  /**
   *
   * @type {number}
   * @memberof ResultListNotice
   */
  count?: number;
  /**
   *
   * @type {Query}
   * @memberof ResultListNotice
   */
  query?: Query;
}

/**
 *
 * @export
 * @interface ResultListUser
 */
export interface ResultListUser {
  /**
   *
   * @type {Array<User>}
   * @memberof ResultListUser
   */
  list: Array<User>;
  /**
   *
   * @type {number}
   * @memberof ResultListUser
   */
  count?: number;
  /**
   *
   * @type {Query}
   * @memberof ResultListUser
   */
  query?: Query;
}

/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {string}
   * @memberof User
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  username: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  password?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  keyword?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  avatar: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  type: string;
  /**
   *
   * @type {Array<string>}
   * @memberof User
   */
  groups: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof User
   */
  roles: Array<string>;
  /**
   *
   * @type {string}
   * @memberof User
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  mobile: string;
  /**
   *
   * @type {any}
   * @memberof User
   */
  profile?: any;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  isDisable: boolean;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  isAdmin: boolean;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  isApproved: boolean;
  /**
   *
   * @type {string}
   * @memberof User
   */
  secret: string;
  /**
   *
   * @type {Date}
   * @memberof User
   */
  expired: Date;
}

/**
 * AppApi - axios parameter creator
 * @export
 */
export const AppApiAxiosParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appRoot(options: any = {}): RequestArgs {
      const localVarPath = `/`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AppApi - functional programming interface
 * @export
 */
export const AppApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appRoot(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
      const localVarAxiosArgs = AppApiAxiosParamCreator(configuration).appRoot(options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * AppApi - factory interface
 * @export
 */
export const AppApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appRoot(options?: any) {
      return AppApiFp(configuration).appRoot(options)(axios, basePath);
    },
  };
};

/**
 * AppApi - object-oriented interface
 * @export
 * @class AppApi
 * @extends {BaseAPI}
 */
export class AppApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public appRoot(options?: any) {
    return AppApiFp(this.configuration).appRoot(options)(this.axios, this.basePath);
  }
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} mobile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authCaptcha(mobile: string, options: any = {}): RequestArgs {
      // verify required parameter 'mobile' is not null or undefined
      if (mobile === null || mobile === undefined) {
        throw new RequiredError(
          'mobile',
          'Required parameter mobile was null or undefined when calling authCaptcha.',
        );
      }
      const localVarPath = `/auth/captcha`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (mobile !== undefined) {
        localVarQueryParameter['mobile'] = mobile;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {LoginReq} loginReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLogin(loginReq: LoginReq, options: any = {}): RequestArgs {
      // verify required parameter 'loginReq' is not null or undefined
      if (loginReq === null || loginReq === undefined) {
        throw new RequiredError(
          'loginReq',
          'Required parameter loginReq was null or undefined when calling authLogin.',
        );
      }
      const localVarPath = `/auth/login`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>'LoginReq' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(loginReq || {})
        : loginReq || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLogout(options: any = {}): RequestArgs {
      const localVarPath = `/auth/logout`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {RegisterReq} registerReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authRegister(registerReq: RegisterReq, options: any = {}): RequestArgs {
      // verify required parameter 'registerReq' is not null or undefined
      if (registerReq === null || registerReq === undefined) {
        throw new RequiredError(
          'registerReq',
          'Required parameter registerReq was null or undefined when calling authRegister.',
        );
      }
      const localVarPath = `/auth/register`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>'RegisterReq' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(registerReq || {})
        : registerReq || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} mobile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authCaptcha(
      mobile: string,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Result> {
      const localVarAxiosArgs = AuthApiAxiosParamCreator(configuration).authCaptcha(
        mobile,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {LoginReq} loginReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLogin(
      loginReq: LoginReq,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
      const localVarAxiosArgs = AuthApiAxiosParamCreator(configuration).authLogin(
        loginReq,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLogout(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
      const localVarAxiosArgs = AuthApiAxiosParamCreator(configuration).authLogout(options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {RegisterReq} registerReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authRegister(
      registerReq: RegisterReq,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
      const localVarAxiosArgs = AuthApiAxiosParamCreator(configuration).authRegister(
        registerReq,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     *
     * @param {string} mobile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authCaptcha(mobile: string, options?: any) {
      return AuthApiFp(configuration).authCaptcha(mobile, options)(axios, basePath);
    },
    /**
     *
     * @param {LoginReq} loginReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLogin(loginReq: LoginReq, options?: any) {
      return AuthApiFp(configuration).authLogin(loginReq, options)(axios, basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLogout(options?: any) {
      return AuthApiFp(configuration).authLogout(options)(axios, basePath);
    },
    /**
     *
     * @param {RegisterReq} registerReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authRegister(registerReq: RegisterReq, options?: any) {
      return AuthApiFp(configuration).authRegister(registerReq, options)(axios, basePath);
    },
  };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
  /**
   *
   * @param {string} mobile
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authCaptcha(mobile: string, options?: any) {
    return AuthApiFp(this.configuration).authCaptcha(mobile, options)(this.axios, this.basePath);
  }

  /**
   *
   * @param {LoginReq} loginReq
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authLogin(loginReq: LoginReq, options?: any) {
    return AuthApiFp(this.configuration).authLogin(loginReq, options)(this.axios, this.basePath);
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authLogout(options?: any) {
    return AuthApiFp(this.configuration).authLogout(options)(this.axios, this.basePath);
  }

  /**
   *
   * @param {RegisterReq} registerReq
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authRegister(registerReq: RegisterReq, options?: any) {
    return AuthApiFp(this.configuration).authRegister(registerReq, options)(
      this.axios,
      this.basePath,
    );
  }
}

/**
 * CoreApi - axios parameter creator
 * @export
 */
export const CoreApiAxiosParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {CreateDictReq} createDictReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictsCreate(createDictReq: CreateDictReq, options: any = {}): RequestArgs {
      // verify required parameter 'createDictReq' is not null or undefined
      if (createDictReq === null || createDictReq === undefined) {
        throw new RequiredError(
          'createDictReq',
          'Required parameter createDictReq was null or undefined when calling dictsCreate.',
        );
      }
      const localVarPath = `/dicts/`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>'CreateDictReq' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(createDictReq || {})
        : createDictReq || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictsFindOne(id: string, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling dictsFindOne.',
        );
      }
      const localVarPath = `/dicts/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [keyword]
     * @param {number} [index]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictsQuery(keyword?: string, index?: number, size?: number, options: any = {}): RequestArgs {
      const localVarPath = `/dicts/query`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (keyword !== undefined) {
        localVarQueryParameter['keyword'] = keyword;
      }

      if (index !== undefined) {
        localVarQueryParameter['index'] = index;
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [keyword]
     * @param {string} [value]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictsSearch(keyword?: string, value?: string, options: any = {}): RequestArgs {
      const localVarPath = `/dicts/search`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (keyword !== undefined) {
        localVarQueryParameter['keyword'] = keyword;
      }

      if (value !== undefined) {
        localVarQueryParameter['value'] = value;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {EditDictReq} editDictReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictsUpdate(editDictReq: EditDictReq, options: any = {}): RequestArgs {
      // verify required parameter 'editDictReq' is not null or undefined
      if (editDictReq === null || editDictReq === undefined) {
        throw new RequiredError(
          'editDictReq',
          'Required parameter editDictReq was null or undefined when calling dictsUpdate.',
        );
      }
      const localVarPath = `/dicts/`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>'EditDictReq' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(editDictReq || {})
        : editDictReq || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logsFindOne(id: string, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling logsFindOne.',
        );
      }
      const localVarPath = `/logs/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [keyword]
     * @param {number} [index]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logsQuery(keyword?: string, index?: number, size?: number, options: any = {}): RequestArgs {
      const localVarPath = `/logs/query`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (keyword !== undefined) {
        localVarQueryParameter['keyword'] = keyword;
      }

      if (index !== undefined) {
        localVarQueryParameter['index'] = index;
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [keyword]
     * @param {string} [value]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logsSearch(keyword?: string, value?: string, options: any = {}): RequestArgs {
      const localVarPath = `/logs/search`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (keyword !== undefined) {
        localVarQueryParameter['keyword'] = keyword;
      }

      if (value !== undefined) {
        localVarQueryParameter['value'] = value;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateMenuReq} createMenuReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    menusCreate(createMenuReq: CreateMenuReq, options: any = {}): RequestArgs {
      // verify required parameter 'createMenuReq' is not null or undefined
      if (createMenuReq === null || createMenuReq === undefined) {
        throw new RequiredError(
          'createMenuReq',
          'Required parameter createMenuReq was null or undefined when calling menusCreate.',
        );
      }
      const localVarPath = `/menus/`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>'CreateMenuReq' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(createMenuReq || {})
        : createMenuReq || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    menusFindOne(id: string, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling menusFindOne.',
        );
      }
      const localVarPath = `/menus/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [keyword]
     * @param {number} [index]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    menusQuery(keyword?: string, index?: number, size?: number, options: any = {}): RequestArgs {
      const localVarPath = `/menus/query`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (keyword !== undefined) {
        localVarQueryParameter['keyword'] = keyword;
      }

      if (index !== undefined) {
        localVarQueryParameter['index'] = index;
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [keyword]
     * @param {string} [value]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    menusSearch(keyword?: string, value?: string, options: any = {}): RequestArgs {
      const localVarPath = `/menus/search`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (keyword !== undefined) {
        localVarQueryParameter['keyword'] = keyword;
      }

      if (value !== undefined) {
        localVarQueryParameter['value'] = value;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {EditMenuReq} editMenuReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    menusUpdate(editMenuReq: EditMenuReq, options: any = {}): RequestArgs {
      // verify required parameter 'editMenuReq' is not null or undefined
      if (editMenuReq === null || editMenuReq === undefined) {
        throw new RequiredError(
          'editMenuReq',
          'Required parameter editMenuReq was null or undefined when calling menusUpdate.',
        );
      }
      const localVarPath = `/menus/`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>'EditMenuReq' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(editMenuReq || {})
        : editMenuReq || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateNoticeReq} createNoticeReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    noticesCreate(createNoticeReq: CreateNoticeReq, options: any = {}): RequestArgs {
      // verify required parameter 'createNoticeReq' is not null or undefined
      if (createNoticeReq === null || createNoticeReq === undefined) {
        throw new RequiredError(
          'createNoticeReq',
          'Required parameter createNoticeReq was null or undefined when calling noticesCreate.',
        );
      }
      const localVarPath = `/notices/`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>'CreateNoticeReq' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(createNoticeReq || {})
        : createNoticeReq || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    noticesFindOne(id: string, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling noticesFindOne.',
        );
      }
      const localVarPath = `/notices/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [keyword]
     * @param {number} [index]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    noticesQuery(keyword?: string, index?: number, size?: number, options: any = {}): RequestArgs {
      const localVarPath = `/notices/query`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (keyword !== undefined) {
        localVarQueryParameter['keyword'] = keyword;
      }

      if (index !== undefined) {
        localVarQueryParameter['index'] = index;
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [keyword]
     * @param {string} [value]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    noticesSearch(keyword?: string, value?: string, options: any = {}): RequestArgs {
      const localVarPath = `/notices/search`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (keyword !== undefined) {
        localVarQueryParameter['keyword'] = keyword;
      }

      if (value !== undefined) {
        localVarQueryParameter['value'] = value;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {EditNoticeReq} editNoticeReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    noticesUpdate(editNoticeReq: EditNoticeReq, options: any = {}): RequestArgs {
      // verify required parameter 'editNoticeReq' is not null or undefined
      if (editNoticeReq === null || editNoticeReq === undefined) {
        throw new RequiredError(
          'editNoticeReq',
          'Required parameter editNoticeReq was null or undefined when calling noticesUpdate.',
        );
      }
      const localVarPath = `/notices/`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>'EditNoticeReq' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(editNoticeReq || {})
        : editNoticeReq || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateUserReq} createUserReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCreate(createUserReq: CreateUserReq, options: any = {}): RequestArgs {
      // verify required parameter 'createUserReq' is not null or undefined
      if (createUserReq === null || createUserReq === undefined) {
        throw new RequiredError(
          'createUserReq',
          'Required parameter createUserReq was null or undefined when calling usersCreate.',
        );
      }
      const localVarPath = `/users/`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>'CreateUserReq' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(createUserReq || {})
        : createUserReq || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersFindOne(id: string, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling usersFindOne.',
        );
      }
      const localVarPath = `/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersProfile(options: any = {}): RequestArgs {
      const localVarPath = `/users/profile`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [keyword]
     * @param {number} [index]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersQuery(keyword?: string, index?: number, size?: number, options: any = {}): RequestArgs {
      const localVarPath = `/users/query`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (keyword !== undefined) {
        localVarQueryParameter['keyword'] = keyword;
      }

      if (index !== undefined) {
        localVarQueryParameter['index'] = index;
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [keyword]
     * @param {string} [value]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersSearch(keyword?: string, value?: string, options: any = {}): RequestArgs {
      const localVarPath = `/users/search`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (keyword !== undefined) {
        localVarQueryParameter['keyword'] = keyword;
      }

      if (value !== undefined) {
        localVarQueryParameter['value'] = value;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {EditUserReq} editUserReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUpdate(editUserReq: EditUserReq, options: any = {}): RequestArgs {
      // verify required parameter 'editUserReq' is not null or undefined
      if (editUserReq === null || editUserReq === undefined) {
        throw new RequiredError(
          'editUserReq',
          'Required parameter editUserReq was null or undefined when calling usersUpdate.',
        );
      }
      const localVarPath = `/users/`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>'EditUserReq' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(editUserReq || {})
        : editUserReq || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CoreApi - functional programming interface
 * @export
 */
export const CoreApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {CreateDictReq} createDictReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictsCreate(
      createDictReq: CreateDictReq,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = CoreApiAxiosParamCreator(configuration).dictsCreate(
        createDictReq,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictsFindOne(
      id: string,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dict> {
      const localVarAxiosArgs = CoreApiAxiosParamCreator(configuration).dictsFindOne(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} [keyword]
     * @param {number} [index]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictsQuery(
      keyword?: string,
      index?: number,
      size?: number,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultListDict> {
      const localVarAxiosArgs = CoreApiAxiosParamCreator(configuration).dictsQuery(
        keyword,
        index,
        size,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} [keyword]
     * @param {string} [value]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictsSearch(
      keyword?: string,
      value?: string,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KeyValueDto>> {
      const localVarAxiosArgs = CoreApiAxiosParamCreator(configuration).dictsSearch(
        keyword,
        value,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {EditDictReq} editDictReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictsUpdate(
      editDictReq: EditDictReq,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dict> {
      const localVarAxiosArgs = CoreApiAxiosParamCreator(configuration).dictsUpdate(
        editDictReq,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logsFindOne(
      id: string,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Log> {
      const localVarAxiosArgs = CoreApiAxiosParamCreator(configuration).logsFindOne(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} [keyword]
     * @param {number} [index]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logsQuery(
      keyword?: string,
      index?: number,
      size?: number,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultListLog> {
      const localVarAxiosArgs = CoreApiAxiosParamCreator(configuration).logsQuery(
        keyword,
        index,
        size,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} [keyword]
     * @param {string} [value]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logsSearch(
      keyword?: string,
      value?: string,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KeyValueDto>> {
      const localVarAxiosArgs = CoreApiAxiosParamCreator(configuration).logsSearch(
        keyword,
        value,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {CreateMenuReq} createMenuReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    menusCreate(
      createMenuReq: CreateMenuReq,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = CoreApiAxiosParamCreator(configuration).menusCreate(
        createMenuReq,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    menusFindOne(
      id: string,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Menu> {
      const localVarAxiosArgs = CoreApiAxiosParamCreator(configuration).menusFindOne(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} [keyword]
     * @param {number} [index]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    menusQuery(
      keyword?: string,
      index?: number,
      size?: number,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultListMenu> {
      const localVarAxiosArgs = CoreApiAxiosParamCreator(configuration).menusQuery(
        keyword,
        index,
        size,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} [keyword]
     * @param {string} [value]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    menusSearch(
      keyword?: string,
      value?: string,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KeyValueDto>> {
      const localVarAxiosArgs = CoreApiAxiosParamCreator(configuration).menusSearch(
        keyword,
        value,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {EditMenuReq} editMenuReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    menusUpdate(
      editMenuReq: EditMenuReq,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Menu> {
      const localVarAxiosArgs = CoreApiAxiosParamCreator(configuration).menusUpdate(
        editMenuReq,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {CreateNoticeReq} createNoticeReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    noticesCreate(
      createNoticeReq: CreateNoticeReq,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = CoreApiAxiosParamCreator(configuration).noticesCreate(
        createNoticeReq,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    noticesFindOne(
      id: string,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notice> {
      const localVarAxiosArgs = CoreApiAxiosParamCreator(configuration).noticesFindOne(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} [keyword]
     * @param {number} [index]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    noticesQuery(
      keyword?: string,
      index?: number,
      size?: number,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultListNotice> {
      const localVarAxiosArgs = CoreApiAxiosParamCreator(configuration).noticesQuery(
        keyword,
        index,
        size,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} [keyword]
     * @param {string} [value]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    noticesSearch(
      keyword?: string,
      value?: string,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KeyValueDto>> {
      const localVarAxiosArgs = CoreApiAxiosParamCreator(configuration).noticesSearch(
        keyword,
        value,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {EditNoticeReq} editNoticeReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    noticesUpdate(
      editNoticeReq: EditNoticeReq,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notice> {
      const localVarAxiosArgs = CoreApiAxiosParamCreator(configuration).noticesUpdate(
        editNoticeReq,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {CreateUserReq} createUserReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCreate(
      createUserReq: CreateUserReq,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = CoreApiAxiosParamCreator(configuration).usersCreate(
        createUserReq,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersFindOne(
      id: string,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
      const localVarAxiosArgs = CoreApiAxiosParamCreator(configuration).usersFindOne(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersProfile(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
      const localVarAxiosArgs = CoreApiAxiosParamCreator(configuration).usersProfile(options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} [keyword]
     * @param {number} [index]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersQuery(
      keyword?: string,
      index?: number,
      size?: number,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultListUser> {
      const localVarAxiosArgs = CoreApiAxiosParamCreator(configuration).usersQuery(
        keyword,
        index,
        size,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} [keyword]
     * @param {string} [value]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersSearch(
      keyword?: string,
      value?: string,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KeyValueDto>> {
      const localVarAxiosArgs = CoreApiAxiosParamCreator(configuration).usersSearch(
        keyword,
        value,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {EditUserReq} editUserReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUpdate(
      editUserReq: EditUserReq,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
      const localVarAxiosArgs = CoreApiAxiosParamCreator(configuration).usersUpdate(
        editUserReq,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * CoreApi - factory interface
 * @export
 */
export const CoreApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     *
     * @param {CreateDictReq} createDictReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictsCreate(createDictReq: CreateDictReq, options?: any) {
      return CoreApiFp(configuration).dictsCreate(createDictReq, options)(axios, basePath);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictsFindOne(id: string, options?: any) {
      return CoreApiFp(configuration).dictsFindOne(id, options)(axios, basePath);
    },
    /**
     *
     * @param {string} [keyword]
     * @param {number} [index]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictsQuery(keyword?: string, index?: number, size?: number, options?: any) {
      return CoreApiFp(configuration).dictsQuery(keyword, index, size, options)(axios, basePath);
    },
    /**
     *
     * @param {string} [keyword]
     * @param {string} [value]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictsSearch(keyword?: string, value?: string, options?: any) {
      return CoreApiFp(configuration).dictsSearch(keyword, value, options)(axios, basePath);
    },
    /**
     *
     * @param {EditDictReq} editDictReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dictsUpdate(editDictReq: EditDictReq, options?: any) {
      return CoreApiFp(configuration).dictsUpdate(editDictReq, options)(axios, basePath);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logsFindOne(id: string, options?: any) {
      return CoreApiFp(configuration).logsFindOne(id, options)(axios, basePath);
    },
    /**
     *
     * @param {string} [keyword]
     * @param {number} [index]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logsQuery(keyword?: string, index?: number, size?: number, options?: any) {
      return CoreApiFp(configuration).logsQuery(keyword, index, size, options)(axios, basePath);
    },
    /**
     *
     * @param {string} [keyword]
     * @param {string} [value]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logsSearch(keyword?: string, value?: string, options?: any) {
      return CoreApiFp(configuration).logsSearch(keyword, value, options)(axios, basePath);
    },
    /**
     *
     * @param {CreateMenuReq} createMenuReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    menusCreate(createMenuReq: CreateMenuReq, options?: any) {
      return CoreApiFp(configuration).menusCreate(createMenuReq, options)(axios, basePath);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    menusFindOne(id: string, options?: any) {
      return CoreApiFp(configuration).menusFindOne(id, options)(axios, basePath);
    },
    /**
     *
     * @param {string} [keyword]
     * @param {number} [index]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    menusQuery(keyword?: string, index?: number, size?: number, options?: any) {
      return CoreApiFp(configuration).menusQuery(keyword, index, size, options)(axios, basePath);
    },
    /**
     *
     * @param {string} [keyword]
     * @param {string} [value]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    menusSearch(keyword?: string, value?: string, options?: any) {
      return CoreApiFp(configuration).menusSearch(keyword, value, options)(axios, basePath);
    },
    /**
     *
     * @param {EditMenuReq} editMenuReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    menusUpdate(editMenuReq: EditMenuReq, options?: any) {
      return CoreApiFp(configuration).menusUpdate(editMenuReq, options)(axios, basePath);
    },
    /**
     *
     * @param {CreateNoticeReq} createNoticeReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    noticesCreate(createNoticeReq: CreateNoticeReq, options?: any) {
      return CoreApiFp(configuration).noticesCreate(createNoticeReq, options)(axios, basePath);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    noticesFindOne(id: string, options?: any) {
      return CoreApiFp(configuration).noticesFindOne(id, options)(axios, basePath);
    },
    /**
     *
     * @param {string} [keyword]
     * @param {number} [index]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    noticesQuery(keyword?: string, index?: number, size?: number, options?: any) {
      return CoreApiFp(configuration).noticesQuery(keyword, index, size, options)(axios, basePath);
    },
    /**
     *
     * @param {string} [keyword]
     * @param {string} [value]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    noticesSearch(keyword?: string, value?: string, options?: any) {
      return CoreApiFp(configuration).noticesSearch(keyword, value, options)(axios, basePath);
    },
    /**
     *
     * @param {EditNoticeReq} editNoticeReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    noticesUpdate(editNoticeReq: EditNoticeReq, options?: any) {
      return CoreApiFp(configuration).noticesUpdate(editNoticeReq, options)(axios, basePath);
    },
    /**
     *
     * @param {CreateUserReq} createUserReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCreate(createUserReq: CreateUserReq, options?: any) {
      return CoreApiFp(configuration).usersCreate(createUserReq, options)(axios, basePath);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersFindOne(id: string, options?: any) {
      return CoreApiFp(configuration).usersFindOne(id, options)(axios, basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersProfile(options?: any) {
      return CoreApiFp(configuration).usersProfile(options)(axios, basePath);
    },
    /**
     *
     * @param {string} [keyword]
     * @param {number} [index]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersQuery(keyword?: string, index?: number, size?: number, options?: any) {
      return CoreApiFp(configuration).usersQuery(keyword, index, size, options)(axios, basePath);
    },
    /**
     *
     * @param {string} [keyword]
     * @param {string} [value]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersSearch(keyword?: string, value?: string, options?: any) {
      return CoreApiFp(configuration).usersSearch(keyword, value, options)(axios, basePath);
    },
    /**
     *
     * @param {EditUserReq} editUserReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUpdate(editUserReq: EditUserReq, options?: any) {
      return CoreApiFp(configuration).usersUpdate(editUserReq, options)(axios, basePath);
    },
  };
};

/**
 * CoreApi - object-oriented interface
 * @export
 * @class CoreApi
 * @extends {BaseAPI}
 */
export class CoreApi extends BaseAPI {
  /**
   *
   * @param {CreateDictReq} createDictReq
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public dictsCreate(createDictReq: CreateDictReq, options?: any) {
    return CoreApiFp(this.configuration).dictsCreate(createDictReq, options)(
      this.axios,
      this.basePath,
    );
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public dictsFindOne(id: string, options?: any) {
    return CoreApiFp(this.configuration).dictsFindOne(id, options)(this.axios, this.basePath);
  }

  /**
   *
   * @param {string} [keyword]
   * @param {number} [index]
   * @param {number} [size]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public dictsQuery(keyword?: string, index?: number, size?: number, options?: any) {
    return CoreApiFp(this.configuration).dictsQuery(keyword, index, size, options)(
      this.axios,
      this.basePath,
    );
  }

  /**
   *
   * @param {string} [keyword]
   * @param {string} [value]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public dictsSearch(keyword?: string, value?: string, options?: any) {
    return CoreApiFp(this.configuration).dictsSearch(keyword, value, options)(
      this.axios,
      this.basePath,
    );
  }

  /**
   *
   * @param {EditDictReq} editDictReq
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public dictsUpdate(editDictReq: EditDictReq, options?: any) {
    return CoreApiFp(this.configuration).dictsUpdate(editDictReq, options)(
      this.axios,
      this.basePath,
    );
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public logsFindOne(id: string, options?: any) {
    return CoreApiFp(this.configuration).logsFindOne(id, options)(this.axios, this.basePath);
  }

  /**
   *
   * @param {string} [keyword]
   * @param {number} [index]
   * @param {number} [size]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public logsQuery(keyword?: string, index?: number, size?: number, options?: any) {
    return CoreApiFp(this.configuration).logsQuery(keyword, index, size, options)(
      this.axios,
      this.basePath,
    );
  }

  /**
   *
   * @param {string} [keyword]
   * @param {string} [value]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public logsSearch(keyword?: string, value?: string, options?: any) {
    return CoreApiFp(this.configuration).logsSearch(keyword, value, options)(
      this.axios,
      this.basePath,
    );
  }

  /**
   *
   * @param {CreateMenuReq} createMenuReq
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public menusCreate(createMenuReq: CreateMenuReq, options?: any) {
    return CoreApiFp(this.configuration).menusCreate(createMenuReq, options)(
      this.axios,
      this.basePath,
    );
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public menusFindOne(id: string, options?: any) {
    return CoreApiFp(this.configuration).menusFindOne(id, options)(this.axios, this.basePath);
  }

  /**
   *
   * @param {string} [keyword]
   * @param {number} [index]
   * @param {number} [size]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public menusQuery(keyword?: string, index?: number, size?: number, options?: any) {
    return CoreApiFp(this.configuration).menusQuery(keyword, index, size, options)(
      this.axios,
      this.basePath,
    );
  }

  /**
   *
   * @param {string} [keyword]
   * @param {string} [value]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public menusSearch(keyword?: string, value?: string, options?: any) {
    return CoreApiFp(this.configuration).menusSearch(keyword, value, options)(
      this.axios,
      this.basePath,
    );
  }

  /**
   *
   * @param {EditMenuReq} editMenuReq
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public menusUpdate(editMenuReq: EditMenuReq, options?: any) {
    return CoreApiFp(this.configuration).menusUpdate(editMenuReq, options)(
      this.axios,
      this.basePath,
    );
  }

  /**
   *
   * @param {CreateNoticeReq} createNoticeReq
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public noticesCreate(createNoticeReq: CreateNoticeReq, options?: any) {
    return CoreApiFp(this.configuration).noticesCreate(createNoticeReq, options)(
      this.axios,
      this.basePath,
    );
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public noticesFindOne(id: string, options?: any) {
    return CoreApiFp(this.configuration).noticesFindOne(id, options)(this.axios, this.basePath);
  }

  /**
   *
   * @param {string} [keyword]
   * @param {number} [index]
   * @param {number} [size]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public noticesQuery(keyword?: string, index?: number, size?: number, options?: any) {
    return CoreApiFp(this.configuration).noticesQuery(keyword, index, size, options)(
      this.axios,
      this.basePath,
    );
  }

  /**
   *
   * @param {string} [keyword]
   * @param {string} [value]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public noticesSearch(keyword?: string, value?: string, options?: any) {
    return CoreApiFp(this.configuration).noticesSearch(keyword, value, options)(
      this.axios,
      this.basePath,
    );
  }

  /**
   *
   * @param {EditNoticeReq} editNoticeReq
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public noticesUpdate(editNoticeReq: EditNoticeReq, options?: any) {
    return CoreApiFp(this.configuration).noticesUpdate(editNoticeReq, options)(
      this.axios,
      this.basePath,
    );
  }

  /**
   *
   * @param {CreateUserReq} createUserReq
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public usersCreate(createUserReq: CreateUserReq, options?: any) {
    return CoreApiFp(this.configuration).usersCreate(createUserReq, options)(
      this.axios,
      this.basePath,
    );
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public usersFindOne(id: string, options?: any) {
    return CoreApiFp(this.configuration).usersFindOne(id, options)(this.axios, this.basePath);
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public usersProfile(options?: any) {
    return CoreApiFp(this.configuration).usersProfile(options)(this.axios, this.basePath);
  }

  /**
   *
   * @param {string} [keyword]
   * @param {number} [index]
   * @param {number} [size]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public usersQuery(keyword?: string, index?: number, size?: number, options?: any) {
    return CoreApiFp(this.configuration).usersQuery(keyword, index, size, options)(
      this.axios,
      this.basePath,
    );
  }

  /**
   *
   * @param {string} [keyword]
   * @param {string} [value]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public usersSearch(keyword?: string, value?: string, options?: any) {
    return CoreApiFp(this.configuration).usersSearch(keyword, value, options)(
      this.axios,
      this.basePath,
    );
  }

  /**
   *
   * @param {EditUserReq} editUserReq
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoreApi
   */
  public usersUpdate(editUserReq: EditUserReq, options?: any) {
    return CoreApiFp(this.configuration).usersUpdate(editUserReq, options)(
      this.axios,
      this.basePath,
    );
  }
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {CreateProductDto} createProductDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsCreate(createProductDto: CreateProductDto, options: any = {}): RequestArgs {
      // verify required parameter 'createProductDto' is not null or undefined
      if (createProductDto === null || createProductDto === undefined) {
        throw new RequiredError(
          'createProductDto',
          'Required parameter createProductDto was null or undefined when calling productsCreate.',
        );
      }
      const localVarPath = `/cats/`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>'CreateProductDto' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(createProductDto || {})
        : createProductDto || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsFindAll(options: any = {}): RequestArgs {
      const localVarPath = `/cats/`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsFindOne(id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling productsFindOne.',
        );
      }
      const localVarPath = `/cats/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {CreateProductDto} createProductDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsCreate(
      createProductDto: CreateProductDto,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).productsCreate(
        createProductDto,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsFindAll(
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Product>> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).productsFindAll(options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsFindOne(
      id: number,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).productsFindOne(
        id,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     *
     * @param {CreateProductDto} createProductDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsCreate(createProductDto: CreateProductDto, options?: any) {
      return DefaultApiFp(configuration).productsCreate(createProductDto, options)(axios, basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsFindAll(options?: any) {
      return DefaultApiFp(configuration).productsFindAll(options)(axios, basePath);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productsFindOne(id: number, options?: any) {
      return DefaultApiFp(configuration).productsFindOne(id, options)(axios, basePath);
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @param {CreateProductDto} createProductDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public productsCreate(createProductDto: CreateProductDto, options?: any) {
    return DefaultApiFp(this.configuration).productsCreate(createProductDto, options)(
      this.axios,
      this.basePath,
    );
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public productsFindAll(options?: any) {
    return DefaultApiFp(this.configuration).productsFindAll(options)(this.axios, this.basePath);
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public productsFindOne(id: number, options?: any) {
    return DefaultApiFp(this.configuration).productsFindOne(id, options)(this.axios, this.basePath);
  }
}
