/**
 * rest api interface
 * 项目标准接口
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccessToken
 */
export interface AccessToken {
    /**
     * 
     * @type {number}
     * @memberof AccessToken
     */
    expiresIn: number;
    /**
     * 
     * @type {string}
     * @memberof AccessToken
     */
    accessToken: string;
}
/**
 * 
 * @export
 * @interface ArticleRes
 */
export interface ArticleRes {
    /**
     * 
     * @type {string}
     * @memberof ArticleRes
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleRes
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleRes
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleRes
     */
    picture: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleRes
     */
    category: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleRes
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleRes
     */
    author: string;
    /**
     * 
     * @type {number}
     * @memberof ArticleRes
     */
    sort: number;
    /**
     * 
     * @type {boolean}
     * @memberof ArticleRes
     */
    disable: boolean;
    /**
     * 
     * @type {string}
     * @memberof ArticleRes
     */
    meta: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleRes
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleRes
     */
    template: string;
}
/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    slug: string;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    order: number;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    parent: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Category
     */
    paths: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    description: string;
}
/**
 * 
 * @export
 * @interface CategoryRes
 */
export interface CategoryRes {
    /**
     * 
     * @type {string}
     * @memberof CategoryRes
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryRes
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryRes
     */
    slug: string;
    /**
     * 
     * @type {number}
     * @memberof CategoryRes
     */
    order: number;
    /**
     * 
     * @type {string}
     * @memberof CategoryRes
     */
    parent: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CategoryRes
     */
    paths: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CategoryRes
     */
    description: string;
}
/**
 * 
 * @export
 * @interface CreateArticleDto
 */
export interface CreateArticleDto {
    /**
     * 
     * @type {string}
     * @memberof CreateArticleDto
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateArticleDto
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof CreateArticleDto
     */
    keyword?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateArticleDto
     */
    picture?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateArticleDto
     */
    category: string;
    /**
     * 
     * @type {string}
     * @memberof CreateArticleDto
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateArticleDto
     */
    author?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateArticleDto
     */
    sort?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CreateArticleDto
     */
    disable?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateArticleDto
     */
    meta?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateArticleDto
     */
    content?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateArticleDto
     */
    template?: string;
}
/**
 * 
 * @export
 * @interface CreateCategoryDto
 */
export interface CreateCategoryDto {
    /**
     * 
     * @type {string}
     * @memberof CreateCategoryDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCategoryDto
     */
    slug: string;
    /**
     * 
     * @type {number}
     * @memberof CreateCategoryDto
     */
    order?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateCategoryDto
     */
    parent?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateCategoryDto
     */
    paths?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateCategoryDto
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface CreateMediaDto
 */
export interface CreateMediaDto {
    /**
     * 
     * @type {string}
     * @memberof CreateMediaDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMediaDto
     */
    caption?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMediaDto
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMediaDto
     */
    ext?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMediaDto
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMediaDto
     */
    uri?: string;
}
/**
 * 
 * @export
 * @interface CreatePageReq
 */
export interface CreatePageReq {
    /**
     * 
     * @type {string}
     * @memberof CreatePageReq
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePageReq
     */
    keyword?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePageReq
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePageReq
     */
    description: string;
    /**
     * 
     * @type {number}
     * @memberof CreatePageReq
     */
    sort?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CreatePageReq
     */
    disable?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreatePageReq
     */
    meta?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePageReq
     */
    publish?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePageReq
     */
    content?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePageReq
     */
    template?: string;
}
/**
 * 
 * @export
 * @interface CreatePhotoDto
 */
export interface CreatePhotoDto {
    /**
     * 
     * @type {string}
     * @memberof CreatePhotoDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePhotoDto
     */
    caption: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePhotoDto
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePhotoDto
     */
    ext: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePhotoDto
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePhotoDto
     */
    uri: string;
}
/**
 * 
 * @export
 * @interface CreateWidgetDto
 */
export interface CreateWidgetDto {
    /**
     * 
     * @type {string}
     * @memberof CreateWidgetDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWidgetDto
     */
    title: string;
    /**
     * 
     * @type {object}
     * @memberof CreateWidgetDto
     */
    params: object;
    /**
     * 
     * @type {string}
     * @memberof CreateWidgetDto
     */
    type: string;
}
/**
 * 
 * @export
 * @interface EditArticleDto
 */
export interface EditArticleDto {
    /**
     * 
     * @type {string}
     * @memberof EditArticleDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof EditArticleDto
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EditArticleDto
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof EditArticleDto
     */
    keyword?: string;
    /**
     * 
     * @type {string}
     * @memberof EditArticleDto
     */
    picture?: string;
    /**
     * 
     * @type {string}
     * @memberof EditArticleDto
     */
    category: string;
    /**
     * 
     * @type {string}
     * @memberof EditArticleDto
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof EditArticleDto
     */
    author?: string;
    /**
     * 
     * @type {number}
     * @memberof EditArticleDto
     */
    sort?: number;
    /**
     * 
     * @type {boolean}
     * @memberof EditArticleDto
     */
    disable?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EditArticleDto
     */
    meta?: string;
    /**
     * 
     * @type {string}
     * @memberof EditArticleDto
     */
    content?: string;
    /**
     * 
     * @type {string}
     * @memberof EditArticleDto
     */
    template?: string;
}
/**
 * 
 * @export
 * @interface EditCategoryDto
 */
export interface EditCategoryDto {
    /**
     * 
     * @type {string}
     * @memberof EditCategoryDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof EditCategoryDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof EditCategoryDto
     */
    slug: string;
    /**
     * 
     * @type {number}
     * @memberof EditCategoryDto
     */
    order?: number;
    /**
     * 
     * @type {string}
     * @memberof EditCategoryDto
     */
    parent?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof EditCategoryDto
     */
    paths?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof EditCategoryDto
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface EditMediaDto
 */
export interface EditMediaDto {
    /**
     * 
     * @type {string}
     * @memberof EditMediaDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof EditMediaDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof EditMediaDto
     */
    caption?: string;
    /**
     * 
     * @type {string}
     * @memberof EditMediaDto
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof EditMediaDto
     */
    ext?: string;
    /**
     * 
     * @type {string}
     * @memberof EditMediaDto
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof EditMediaDto
     */
    uri?: string;
}
/**
 * 
 * @export
 * @interface EditPageReq
 */
export interface EditPageReq {
    /**
     * 
     * @type {string}
     * @memberof EditPageReq
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof EditPageReq
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPageReq
     */
    keyword?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPageReq
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof EditPageReq
     */
    description: string;
    /**
     * 
     * @type {number}
     * @memberof EditPageReq
     */
    sort?: number;
    /**
     * 
     * @type {boolean}
     * @memberof EditPageReq
     */
    disable?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EditPageReq
     */
    meta?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPageReq
     */
    publish?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPageReq
     */
    content?: string;
    /**
     * 
     * @type {string}
     * @memberof EditPageReq
     */
    template?: string;
}
/**
 * 
 * @export
 * @interface EditPhotoDto
 */
export interface EditPhotoDto {
    /**
     * 
     * @type {string}
     * @memberof EditPhotoDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof EditPhotoDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof EditPhotoDto
     */
    caption: string;
    /**
     * 
     * @type {string}
     * @memberof EditPhotoDto
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof EditPhotoDto
     */
    ext: string;
    /**
     * 
     * @type {string}
     * @memberof EditPhotoDto
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof EditPhotoDto
     */
    uri: string;
}
/**
 * 
 * @export
 * @interface EditWidgetDto
 */
export interface EditWidgetDto {
    /**
     * 
     * @type {string}
     * @memberof EditWidgetDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof EditWidgetDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof EditWidgetDto
     */
    title: string;
    /**
     * 
     * @type {object}
     * @memberof EditWidgetDto
     */
    params: object;
    /**
     * 
     * @type {string}
     * @memberof EditWidgetDto
     */
    type: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse200
     */
    ok?: boolean;
}
/**
 * 
 * @export
 * @interface KeyValue
 */
export interface KeyValue {
    /**
     * 
     * @type {string}
     * @memberof KeyValue
     */
    label: string;
    /**
     * 
     * @type {string}
     * @memberof KeyValue
     */
    value: string;
}
/**
 * 
 * @export
 * @interface LoginReq
 */
export interface LoginReq {
    /**
     * 
     * @type {string}
     * @memberof LoginReq
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof LoginReq
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginReq
     */
    password: string;
}
/**
 * 
 * @export
 * @interface LoginRes
 */
export interface LoginRes {
    /**
     * 
     * @type {string}
     * @memberof LoginRes
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRes
     */
    avatar: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRes
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRes
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRes
     */
    mobile: string;
    /**
     * 
     * @type {boolean}
     * @memberof LoginRes
     */
    isAdmin: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LoginRes
     */
    isApproved: boolean;
    /**
     * 
     * @type {number}
     * @memberof LoginRes
     */
    expired: number;
    /**
     * 
     * @type {string}
     * @memberof LoginRes
     */
    company?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRes
     */
    siteUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRes
     */
    address?: string;
    /**
     * 
     * @type {AccessToken}
     * @memberof LoginRes
     */
    token: AccessToken;
    /**
     * 
     * @type {Array<string>}
     * @memberof LoginRes
     */
    roles?: Array<string>;
}
/**
 * 
 * @export
 * @interface Media
 */
export interface Media {
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    caption: string;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    description: string;
    /**
     * 
     * @type {object}
     * @memberof Media
     */
    ext: object;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    uri: string;
}
/**
 * 
 * @export
 * @interface MediaFile
 */
export interface MediaFile {
    /**
     * 
     * @type {string}
     * @memberof MediaFile
     */
    fieldname: string;
    /**
     * 
     * @type {string}
     * @memberof MediaFile
     */
    originalname: string;
    /**
     * 
     * @type {string}
     * @memberof MediaFile
     */
    encoding: string;
    /**
     * 
     * @type {string}
     * @memberof MediaFile
     */
    mimetype: string;
    /**
     * 
     * @type {string}
     * @memberof MediaFile
     */
    destination: string;
    /**
     * 
     * @type {string}
     * @memberof MediaFile
     */
    filename: string;
    /**
     * 
     * @type {string}
     * @memberof MediaFile
     */
    path: string;
    /**
     * 
     * @type {number}
     * @memberof MediaFile
     */
    size: number;
}
/**
 * 
 * @export
 * @interface MediaRes
 */
export interface MediaRes {
    /**
     * 
     * @type {string}
     * @memberof MediaRes
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof MediaRes
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof MediaRes
     */
    caption: string;
    /**
     * 
     * @type {string}
     * @memberof MediaRes
     */
    description: string;
    /**
     * 
     * @type {object}
     * @memberof MediaRes
     */
    ext: object;
    /**
     * 
     * @type {string}
     * @memberof MediaRes
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof MediaRes
     */
    uri: string;
}
/**
 * 
 * @export
 * @interface PageRes
 */
export interface PageRes {
    /**
     * 
     * @type {string}
     * @memberof PageRes
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof PageRes
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof PageRes
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof PageRes
     */
    description: string;
    /**
     * 
     * @type {number}
     * @memberof PageRes
     */
    sort: number;
    /**
     * 
     * @type {string}
     * @memberof PageRes
     */
    publish: string;
    /**
     * 
     * @type {boolean}
     * @memberof PageRes
     */
    disable: boolean;
    /**
     * 
     * @type {string}
     * @memberof PageRes
     */
    meta: string;
    /**
     * 
     * @type {string}
     * @memberof PageRes
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof PageRes
     */
    template: string;
}
/**
 * 
 * @export
 * @interface Photo
 */
export interface Photo {
    /**
     * 
     * @type {string}
     * @memberof Photo
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Photo
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Photo
     */
    caption: string;
    /**
     * 
     * @type {string}
     * @memberof Photo
     */
    description: string;
    /**
     * 
     * @type {object}
     * @memberof Photo
     */
    ext: object;
    /**
     * 
     * @type {string}
     * @memberof Photo
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof Photo
     */
    uri: string;
}
/**
 * 
 * @export
 * @interface PhotoRes
 */
export interface PhotoRes {
    /**
     * 
     * @type {string}
     * @memberof PhotoRes
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof PhotoRes
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof PhotoRes
     */
    caption: string;
    /**
     * 
     * @type {string}
     * @memberof PhotoRes
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof PhotoRes
     */
    ext: string;
    /**
     * 
     * @type {string}
     * @memberof PhotoRes
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof PhotoRes
     */
    uri: string;
}
/**
 * 
 * @export
 * @interface Query
 */
export interface Query {
    /**
     * 
     * @type {number}
     * @memberof Query
     */
    size: number;
    /**
     * 
     * @type {number}
     * @memberof Query
     */
    page: number;
}
/**
 * 
 * @export
 * @interface RegisterReq
 */
export interface RegisterReq {
    /**
     * 
     * @type {string}
     * @memberof RegisterReq
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterReq
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterReq
     */
    mobile: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterReq
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterReq
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterReq
     */
    mobilePrefix?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterReq
     */
    veryCode: string;
}
/**
 * 
 * @export
 * @interface ResultListArticleRes
 */
export interface ResultListArticleRes {
    /**
     * 
     * @type {Array<ArticleRes>}
     * @memberof ResultListArticleRes
     */
    list: Array<ArticleRes>;
    /**
     * 
     * @type {number}
     * @memberof ResultListArticleRes
     */
    count?: number;
    /**
     * 
     * @type {Query}
     * @memberof ResultListArticleRes
     */
    query?: Query;
}
/**
 * 
 * @export
 * @interface ResultListCategoryRes
 */
export interface ResultListCategoryRes {
    /**
     * 
     * @type {Array<CategoryRes>}
     * @memberof ResultListCategoryRes
     */
    list: Array<CategoryRes>;
    /**
     * 
     * @type {number}
     * @memberof ResultListCategoryRes
     */
    count?: number;
    /**
     * 
     * @type {Query}
     * @memberof ResultListCategoryRes
     */
    query?: Query;
}
/**
 * 
 * @export
 * @interface ResultListMediaRes
 */
export interface ResultListMediaRes {
    /**
     * 
     * @type {Array<MediaRes>}
     * @memberof ResultListMediaRes
     */
    list: Array<MediaRes>;
    /**
     * 
     * @type {number}
     * @memberof ResultListMediaRes
     */
    count?: number;
    /**
     * 
     * @type {Query}
     * @memberof ResultListMediaRes
     */
    query?: Query;
}
/**
 * 
 * @export
 * @interface ResultListPageRes
 */
export interface ResultListPageRes {
    /**
     * 
     * @type {Array<PageRes>}
     * @memberof ResultListPageRes
     */
    list: Array<PageRes>;
    /**
     * 
     * @type {number}
     * @memberof ResultListPageRes
     */
    count?: number;
    /**
     * 
     * @type {Query}
     * @memberof ResultListPageRes
     */
    query?: Query;
}
/**
 * 
 * @export
 * @interface ResultListPhotoRes
 */
export interface ResultListPhotoRes {
    /**
     * 
     * @type {Array<PhotoRes>}
     * @memberof ResultListPhotoRes
     */
    list: Array<PhotoRes>;
    /**
     * 
     * @type {number}
     * @memberof ResultListPhotoRes
     */
    count?: number;
    /**
     * 
     * @type {Query}
     * @memberof ResultListPhotoRes
     */
    query?: Query;
}
/**
 * 
 * @export
 * @interface ResultListWidgetRes
 */
export interface ResultListWidgetRes {
    /**
     * 
     * @type {Array<WidgetRes>}
     * @memberof ResultListWidgetRes
     */
    list: Array<WidgetRes>;
    /**
     * 
     * @type {number}
     * @memberof ResultListWidgetRes
     */
    count?: number;
    /**
     * 
     * @type {Query}
     * @memberof ResultListWidgetRes
     */
    query?: Query;
}
/**
 * 
 * @export
 * @interface SettingsGroup
 */
export interface SettingsGroup {
    /**
     * 
     * @type {object}
     * @memberof SettingsGroup
     */
    options: object;
}
/**
 * 
 * @export
 * @interface TreeNode
 */
export interface TreeNode {
    /**
     * 
     * @type {string}
     * @memberof TreeNode
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof TreeNode
     */
    icon?: string;
    /**
     * 
     * @type {string}
     * @memberof TreeNode
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof TreeNode
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof TreeNode
     */
    parent: string;
}
/**
 * 
 * @export
 * @interface UploadMultipleRes
 */
export interface UploadMultipleRes {
    /**
     * 
     * @type {boolean}
     * @memberof UploadMultipleRes
     */
    ok: boolean;
    /**
     * 
     * @type {string}
     * @memberof UploadMultipleRes
     */
    error?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UploadMultipleRes
     */
    files?: Array<string>;
}
/**
 * 
 * @export
 * @interface UploadRes
 */
export interface UploadRes {
    /**
     * 
     * @type {boolean}
     * @memberof UploadRes
     */
    ok: boolean;
    /**
     * 
     * @type {string}
     * @memberof UploadRes
     */
    error?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadRes
     */
    file?: string;
}
/**
 * 
 * @export
 * @interface Widget
 */
export interface Widget {
    /**
     * 
     * @type {string}
     * @memberof Widget
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Widget
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Widget
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Widget
     */
    type: string;
    /**
     * 
     * @type {object}
     * @memberof Widget
     */
    params: object;
}
/**
 * 
 * @export
 * @interface WidgetRes
 */
export interface WidgetRes {
    /**
     * 
     * @type {string}
     * @memberof WidgetRes
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof WidgetRes
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof WidgetRes
     */
    title: string;
    /**
     * 
     * @type {object}
     * @memberof WidgetRes
     */
    params: object;
    /**
     * 
     * @type {string}
     * @memberof WidgetRes
     */
    type: string;
}

/**
 * AppApi - axios parameter creator
 * @export
 */
export const AppApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} par1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemo(par1: string, options: any = {}): RequestArgs {
            // verify required parameter 'par1' is not null or undefined
            if (par1 === null || par1 === undefined) {
                throw new RequiredError('par1','Required parameter par1 was null or undefined when calling appDemo.');
            }
            const localVarPath = `/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof par1 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(par1 !== undefined ? par1 : {}) : (par1 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGetAppSettings(name?: string, options: any = {}): RequestArgs {
            const localVarPath = `/name/{name}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRoot(options: any = {}): RequestArgs {
            const localVarPath = `/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppApi - functional programming interface
 * @export
 */
export const AppApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} par1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemo(par1: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = AppApiAxiosParamCreator(configuration).appDemo(par1, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGetAppSettings(name?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsGroup> {
            const localVarAxiosArgs = AppApiAxiosParamCreator(configuration).appGetAppSettings(name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRoot(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = AppApiAxiosParamCreator(configuration).appRoot(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AppApi - factory interface
 * @export
 */
export const AppApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} par1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemo(par1: string, options?: any) {
            return AppApiFp(configuration).appDemo(par1, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGetAppSettings(name?: string, options?: any) {
            return AppApiFp(configuration).appGetAppSettings(name, options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRoot(options?: any) {
            return AppApiFp(configuration).appRoot(options)(axios, basePath);
        },
    };
};

/**
 * AppApi - object-oriented interface
 * @export
 * @class AppApi
 * @extends {BaseAPI}
 */
export class AppApi extends BaseAPI {
    /**
     * 
     * @param {string} par1 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public appDemo(par1: string, options?: any) {
        return AppApiFp(this.configuration).appDemo(par1, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public appGetAppSettings(name?: string, options?: any) {
        return AppApiFp(this.configuration).appGetAppSettings(name, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public appRoot(options?: any) {
        return AppApiFp(this.configuration).appRoot(options)(this.axios, this.basePath);
    }

}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} mobile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCaptcha(mobile: string, options: any = {}): RequestArgs {
            // verify required parameter 'mobile' is not null or undefined
            if (mobile === null || mobile === undefined) {
                throw new RequiredError('mobile','Required parameter mobile was null or undefined when calling authCaptcha.');
            }
            const localVarPath = `/auth/captcha`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mobile !== undefined) {
                localVarQueryParameter['mobile'] = mobile;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginReq} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogin(payload: LoginReq, options: any = {}): RequestArgs {
            // verify required parameter 'payload' is not null or undefined
            if (payload === null || payload === undefined) {
                throw new RequiredError('payload','Required parameter payload was null or undefined when calling authLogin.');
            }
            const localVarPath = `/auth/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof payload !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(payload !== undefined ? payload : {}) : (payload || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogout(options: any = {}): RequestArgs {
            const localVarPath = `/auth/logout`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterReq} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegister(payload: RegisterReq, options: any = {}): RequestArgs {
            // verify required parameter 'payload' is not null or undefined
            if (payload === null || payload === undefined) {
                throw new RequiredError('payload','Required parameter payload was null or undefined when calling authRegister.');
            }
            const localVarPath = `/auth/register`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof payload !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(payload !== undefined ? payload : {}) : (payload || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} mobile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCaptcha(mobile: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
            const localVarAxiosArgs = AuthApiAxiosParamCreator(configuration).authCaptcha(mobile, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {LoginReq} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogin(payload: LoginReq, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginRes> {
            const localVarAxiosArgs = AuthApiAxiosParamCreator(configuration).authLogin(payload, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogout(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
            const localVarAxiosArgs = AuthApiAxiosParamCreator(configuration).authLogout(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {RegisterReq} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegister(payload: RegisterReq, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessToken> {
            const localVarAxiosArgs = AuthApiAxiosParamCreator(configuration).authRegister(payload, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} mobile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCaptcha(mobile: string, options?: any) {
            return AuthApiFp(configuration).authCaptcha(mobile, options)(axios, basePath);
        },
        /**
         * 
         * @param {LoginReq} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogin(payload: LoginReq, options?: any) {
            return AuthApiFp(configuration).authLogin(payload, options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogout(options?: any) {
            return AuthApiFp(configuration).authLogout(options)(axios, basePath);
        },
        /**
         * 
         * @param {RegisterReq} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegister(payload: RegisterReq, options?: any) {
            return AuthApiFp(configuration).authRegister(payload, options)(axios, basePath);
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {string} mobile 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authCaptcha(mobile: string, options?: any) {
        return AuthApiFp(this.configuration).authCaptcha(mobile, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {LoginReq} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authLogin(payload: LoginReq, options?: any) {
        return AuthApiFp(this.configuration).authLogin(payload, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authLogout(options?: any) {
        return AuthApiFp(this.configuration).authLogout(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {RegisterReq} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authRegister(payload: RegisterReq, options?: any) {
        return AuthApiFp(this.configuration).authRegister(payload, options)(this.axios, this.basePath);
    }

}


/**
 * CmsApi - axios parameter creator
 * @export
 */
export const CmsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateArticleDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleCreate(entry: CreateArticleDto, options: any = {}): RequestArgs {
            // verify required parameter 'entry' is not null or undefined
            if (entry === null || entry === undefined) {
                throw new RequiredError('entry','Required parameter entry was null or undefined when calling articleCreate.');
            }
            const localVarPath = `/article/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof entry !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(entry !== undefined ? entry : {}) : (entry || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleFindOne(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling articleFindOne.');
            }
            const localVarPath = `/article/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleQuery(keyword?: string, page?: number, size?: number, sort?: string, options: any = {}): RequestArgs {
            const localVarPath = `/article/query`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleRemove(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling articleRemove.');
            }
            const localVarPath = `/article/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleSearch(keyword?: string, value?: string, options: any = {}): RequestArgs {
            const localVarPath = `/article/search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EditArticleDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleUpdate(entry: EditArticleDto, options: any = {}): RequestArgs {
            // verify required parameter 'entry' is not null or undefined
            if (entry === null || entry === undefined) {
                throw new RequiredError('entry','Required parameter entry was null or undefined when calling articleUpdate.');
            }
            const localVarPath = `/article/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof entry !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(entry !== undefined ? entry : {}) : (entry || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCategoryDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryCreate(entry: CreateCategoryDto, options: any = {}): RequestArgs {
            // verify required parameter 'entry' is not null or undefined
            if (entry === null || entry === undefined) {
                throw new RequiredError('entry','Required parameter entry was null or undefined when calling categoryCreate.');
            }
            const localVarPath = `/category/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof entry !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(entry !== undefined ? entry : {}) : (entry || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryFindOne(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling categoryFindOne.');
            }
            const localVarPath = `/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryQuery(keyword?: string, page?: number, size?: number, sort?: string, options: any = {}): RequestArgs {
            const localVarPath = `/category/query`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryRemove(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling categoryRemove.');
            }
            const localVarPath = `/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categorySearch(keyword?: string, value?: string, options: any = {}): RequestArgs {
            const localVarPath = `/category/search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categorySearchTree(keyword?: string, value?: string, options: any = {}): RequestArgs {
            const localVarPath = `/category/tree`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EditCategoryDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryUpdate(entry: EditCategoryDto, options: any = {}): RequestArgs {
            // verify required parameter 'entry' is not null or undefined
            if (entry === null || entry === undefined) {
                throw new RequiredError('entry','Required parameter entry was null or undefined when calling categoryUpdate.');
            }
            const localVarPath = `/category/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof entry !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(entry !== undefined ? entry : {}) : (entry || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateMediaDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaCreate(entry: CreateMediaDto, options: any = {}): RequestArgs {
            // verify required parameter 'entry' is not null or undefined
            if (entry === null || entry === undefined) {
                throw new RequiredError('entry','Required parameter entry was null or undefined when calling mediaCreate.');
            }
            const localVarPath = `/media/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof entry !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(entry !== undefined ? entry : {}) : (entry || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaFindOne(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling mediaFindOne.');
            }
            const localVarPath = `/media/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaQuery(keyword?: string, page?: number, size?: number, sort?: string, options: any = {}): RequestArgs {
            const localVarPath = `/media/query`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaRemove(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling mediaRemove.');
            }
            const localVarPath = `/media/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaSearch(keyword?: string, value?: string, options: any = {}): RequestArgs {
            const localVarPath = `/media/search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EditMediaDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaUpdate(entry: EditMediaDto, options: any = {}): RequestArgs {
            // verify required parameter 'entry' is not null or undefined
            if (entry === null || entry === undefined) {
                throw new RequiredError('entry','Required parameter entry was null or undefined when calling mediaUpdate.');
            }
            const localVarPath = `/media/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof entry !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(entry !== undefined ? entry : {}) : (entry || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MediaFile} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaUploadFile(file: MediaFile, options: any = {}): RequestArgs {
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling mediaUploadFile.');
            }
            const localVarPath = `/media/upload`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof file !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(file !== undefined ? file : {}) : (file || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<string>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaUploadFiles(files?: Array<string>, options: any = {}): RequestArgs {
            const localVarPath = `/media/uploads`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof files !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(files !== undefined ? files : {}) : (files || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePageReq} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageCreate(entry: CreatePageReq, options: any = {}): RequestArgs {
            // verify required parameter 'entry' is not null or undefined
            if (entry === null || entry === undefined) {
                throw new RequiredError('entry','Required parameter entry was null or undefined when calling pageCreate.');
            }
            const localVarPath = `/page/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof entry !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(entry !== undefined ? entry : {}) : (entry || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageFindOne(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling pageFindOne.');
            }
            const localVarPath = `/page/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageQuery(keyword?: string, page?: number, size?: number, sort?: string, options: any = {}): RequestArgs {
            const localVarPath = `/page/query`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageRemove(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling pageRemove.');
            }
            const localVarPath = `/page/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageSearch(keyword?: string, value?: string, options: any = {}): RequestArgs {
            const localVarPath = `/page/search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EditPageReq} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageUpdate(entry: EditPageReq, options: any = {}): RequestArgs {
            // verify required parameter 'entry' is not null or undefined
            if (entry === null || entry === undefined) {
                throw new RequiredError('entry','Required parameter entry was null or undefined when calling pageUpdate.');
            }
            const localVarPath = `/page/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof entry !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(entry !== undefined ? entry : {}) : (entry || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePhotoDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoCreate(entry: CreatePhotoDto, options: any = {}): RequestArgs {
            // verify required parameter 'entry' is not null or undefined
            if (entry === null || entry === undefined) {
                throw new RequiredError('entry','Required parameter entry was null or undefined when calling photoCreate.');
            }
            const localVarPath = `/photo/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof entry !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(entry !== undefined ? entry : {}) : (entry || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoFindOne(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling photoFindOne.');
            }
            const localVarPath = `/photo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoQuery(keyword?: string, page?: number, size?: number, sort?: string, options: any = {}): RequestArgs {
            const localVarPath = `/photo/query`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoRemove(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling photoRemove.');
            }
            const localVarPath = `/photo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoSearch(keyword?: string, value?: string, options: any = {}): RequestArgs {
            const localVarPath = `/photo/search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EditPhotoDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoUpdate(entry: EditPhotoDto, options: any = {}): RequestArgs {
            // verify required parameter 'entry' is not null or undefined
            if (entry === null || entry === undefined) {
                throw new RequiredError('entry','Required parameter entry was null or undefined when calling photoUpdate.');
            }
            const localVarPath = `/photo/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof entry !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(entry !== undefined ? entry : {}) : (entry || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateWidgetDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        widgetCreate(entry: CreateWidgetDto, options: any = {}): RequestArgs {
            // verify required parameter 'entry' is not null or undefined
            if (entry === null || entry === undefined) {
                throw new RequiredError('entry','Required parameter entry was null or undefined when calling widgetCreate.');
            }
            const localVarPath = `/widget/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof entry !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(entry !== undefined ? entry : {}) : (entry || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        widgetFindOne(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling widgetFindOne.');
            }
            const localVarPath = `/widget/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        widgetQuery(keyword?: string, page?: number, size?: number, sort?: string, options: any = {}): RequestArgs {
            const localVarPath = `/widget/query`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        widgetRemove(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling widgetRemove.');
            }
            const localVarPath = `/widget/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        widgetSearch(keyword?: string, value?: string, options: any = {}): RequestArgs {
            const localVarPath = `/widget/search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EditWidgetDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        widgetUpdate(entry: EditWidgetDto, options: any = {}): RequestArgs {
            // verify required parameter 'entry' is not null or undefined
            if (entry === null || entry === undefined) {
                throw new RequiredError('entry','Required parameter entry was null or undefined when calling widgetUpdate.');
            }
            const localVarPath = `/widget/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof entry !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(entry !== undefined ? entry : {}) : (entry || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CmsApi - functional programming interface
 * @export
 */
export const CmsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateArticleDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleCreate(entry: CreateArticleDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArticleRes> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).articleCreate(entry, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleFindOne(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArticleRes> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).articleFindOne(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleQuery(keyword?: string, page?: number, size?: number, sort?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultListArticleRes> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).articleQuery(keyword, page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleRemove(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).articleRemove(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleSearch(keyword?: string, value?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KeyValue>> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).articleSearch(keyword, value, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {EditArticleDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleUpdate(entry: EditArticleDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArticleRes> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).articleUpdate(entry, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {CreateCategoryDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryCreate(entry: CreateCategoryDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryRes> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).categoryCreate(entry, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryFindOne(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).categoryFindOne(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryQuery(keyword?: string, page?: number, size?: number, sort?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultListCategoryRes> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).categoryQuery(keyword, page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryRemove(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).categoryRemove(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categorySearch(keyword?: string, value?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KeyValue>> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).categorySearch(keyword, value, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categorySearchTree(keyword?: string, value?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TreeNode>> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).categorySearchTree(keyword, value, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {EditCategoryDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryUpdate(entry: EditCategoryDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryRes> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).categoryUpdate(entry, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {CreateMediaDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaCreate(entry: CreateMediaDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaRes> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).mediaCreate(entry, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaFindOne(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Media> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).mediaFindOne(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaQuery(keyword?: string, page?: number, size?: number, sort?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultListMediaRes> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).mediaQuery(keyword, page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaRemove(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).mediaRemove(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaSearch(keyword?: string, value?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KeyValue>> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).mediaSearch(keyword, value, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {EditMediaDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaUpdate(entry: EditMediaDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaRes> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).mediaUpdate(entry, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {MediaFile} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaUploadFile(file: MediaFile, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadRes> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).mediaUploadFile(file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Array<string>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaUploadFiles(files?: Array<string>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadMultipleRes> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).mediaUploadFiles(files, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {CreatePageReq} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageCreate(entry: CreatePageReq, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageRes> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).pageCreate(entry, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageFindOne(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageRes> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).pageFindOne(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageQuery(keyword?: string, page?: number, size?: number, sort?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultListPageRes> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).pageQuery(keyword, page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageRemove(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).pageRemove(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageSearch(keyword?: string, value?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KeyValue>> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).pageSearch(keyword, value, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {EditPageReq} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageUpdate(entry: EditPageReq, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageRes> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).pageUpdate(entry, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {CreatePhotoDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoCreate(entry: CreatePhotoDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhotoRes> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).photoCreate(entry, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoFindOne(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Photo> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).photoFindOne(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoQuery(keyword?: string, page?: number, size?: number, sort?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultListPhotoRes> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).photoQuery(keyword, page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoRemove(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).photoRemove(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoSearch(keyword?: string, value?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KeyValue>> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).photoSearch(keyword, value, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {EditPhotoDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoUpdate(entry: EditPhotoDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhotoRes> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).photoUpdate(entry, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {CreateWidgetDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        widgetCreate(entry: CreateWidgetDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<WidgetRes> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).widgetCreate(entry, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        widgetFindOne(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Widget> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).widgetFindOne(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        widgetQuery(keyword?: string, page?: number, size?: number, sort?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultListWidgetRes> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).widgetQuery(keyword, page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        widgetRemove(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).widgetRemove(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        widgetSearch(keyword?: string, value?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KeyValue>> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).widgetSearch(keyword, value, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {EditWidgetDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        widgetUpdate(entry: EditWidgetDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<WidgetRes> {
            const localVarAxiosArgs = CmsApiAxiosParamCreator(configuration).widgetUpdate(entry, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CmsApi - factory interface
 * @export
 */
export const CmsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {CreateArticleDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleCreate(entry: CreateArticleDto, options?: any) {
            return CmsApiFp(configuration).articleCreate(entry, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleFindOne(id: string, options?: any) {
            return CmsApiFp(configuration).articleFindOne(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleQuery(keyword?: string, page?: number, size?: number, sort?: string, options?: any) {
            return CmsApiFp(configuration).articleQuery(keyword, page, size, sort, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleRemove(id: string, options?: any) {
            return CmsApiFp(configuration).articleRemove(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleSearch(keyword?: string, value?: string, options?: any) {
            return CmsApiFp(configuration).articleSearch(keyword, value, options)(axios, basePath);
        },
        /**
         * 
         * @param {EditArticleDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleUpdate(entry: EditArticleDto, options?: any) {
            return CmsApiFp(configuration).articleUpdate(entry, options)(axios, basePath);
        },
        /**
         * 
         * @param {CreateCategoryDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryCreate(entry: CreateCategoryDto, options?: any) {
            return CmsApiFp(configuration).categoryCreate(entry, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryFindOne(id: string, options?: any) {
            return CmsApiFp(configuration).categoryFindOne(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryQuery(keyword?: string, page?: number, size?: number, sort?: string, options?: any) {
            return CmsApiFp(configuration).categoryQuery(keyword, page, size, sort, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryRemove(id: string, options?: any) {
            return CmsApiFp(configuration).categoryRemove(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categorySearch(keyword?: string, value?: string, options?: any) {
            return CmsApiFp(configuration).categorySearch(keyword, value, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categorySearchTree(keyword?: string, value?: string, options?: any) {
            return CmsApiFp(configuration).categorySearchTree(keyword, value, options)(axios, basePath);
        },
        /**
         * 
         * @param {EditCategoryDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryUpdate(entry: EditCategoryDto, options?: any) {
            return CmsApiFp(configuration).categoryUpdate(entry, options)(axios, basePath);
        },
        /**
         * 
         * @param {CreateMediaDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaCreate(entry: CreateMediaDto, options?: any) {
            return CmsApiFp(configuration).mediaCreate(entry, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaFindOne(id: string, options?: any) {
            return CmsApiFp(configuration).mediaFindOne(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaQuery(keyword?: string, page?: number, size?: number, sort?: string, options?: any) {
            return CmsApiFp(configuration).mediaQuery(keyword, page, size, sort, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaRemove(id: string, options?: any) {
            return CmsApiFp(configuration).mediaRemove(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaSearch(keyword?: string, value?: string, options?: any) {
            return CmsApiFp(configuration).mediaSearch(keyword, value, options)(axios, basePath);
        },
        /**
         * 
         * @param {EditMediaDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaUpdate(entry: EditMediaDto, options?: any) {
            return CmsApiFp(configuration).mediaUpdate(entry, options)(axios, basePath);
        },
        /**
         * 
         * @param {MediaFile} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaUploadFile(file: MediaFile, options?: any) {
            return CmsApiFp(configuration).mediaUploadFile(file, options)(axios, basePath);
        },
        /**
         * 
         * @param {Array<string>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaUploadFiles(files?: Array<string>, options?: any) {
            return CmsApiFp(configuration).mediaUploadFiles(files, options)(axios, basePath);
        },
        /**
         * 
         * @param {CreatePageReq} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageCreate(entry: CreatePageReq, options?: any) {
            return CmsApiFp(configuration).pageCreate(entry, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageFindOne(id: string, options?: any) {
            return CmsApiFp(configuration).pageFindOne(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageQuery(keyword?: string, page?: number, size?: number, sort?: string, options?: any) {
            return CmsApiFp(configuration).pageQuery(keyword, page, size, sort, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageRemove(id: string, options?: any) {
            return CmsApiFp(configuration).pageRemove(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageSearch(keyword?: string, value?: string, options?: any) {
            return CmsApiFp(configuration).pageSearch(keyword, value, options)(axios, basePath);
        },
        /**
         * 
         * @param {EditPageReq} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageUpdate(entry: EditPageReq, options?: any) {
            return CmsApiFp(configuration).pageUpdate(entry, options)(axios, basePath);
        },
        /**
         * 
         * @param {CreatePhotoDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoCreate(entry: CreatePhotoDto, options?: any) {
            return CmsApiFp(configuration).photoCreate(entry, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoFindOne(id: string, options?: any) {
            return CmsApiFp(configuration).photoFindOne(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoQuery(keyword?: string, page?: number, size?: number, sort?: string, options?: any) {
            return CmsApiFp(configuration).photoQuery(keyword, page, size, sort, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoRemove(id: string, options?: any) {
            return CmsApiFp(configuration).photoRemove(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoSearch(keyword?: string, value?: string, options?: any) {
            return CmsApiFp(configuration).photoSearch(keyword, value, options)(axios, basePath);
        },
        /**
         * 
         * @param {EditPhotoDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoUpdate(entry: EditPhotoDto, options?: any) {
            return CmsApiFp(configuration).photoUpdate(entry, options)(axios, basePath);
        },
        /**
         * 
         * @param {CreateWidgetDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        widgetCreate(entry: CreateWidgetDto, options?: any) {
            return CmsApiFp(configuration).widgetCreate(entry, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        widgetFindOne(id: string, options?: any) {
            return CmsApiFp(configuration).widgetFindOne(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        widgetQuery(keyword?: string, page?: number, size?: number, sort?: string, options?: any) {
            return CmsApiFp(configuration).widgetQuery(keyword, page, size, sort, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        widgetRemove(id: string, options?: any) {
            return CmsApiFp(configuration).widgetRemove(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        widgetSearch(keyword?: string, value?: string, options?: any) {
            return CmsApiFp(configuration).widgetSearch(keyword, value, options)(axios, basePath);
        },
        /**
         * 
         * @param {EditWidgetDto} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        widgetUpdate(entry: EditWidgetDto, options?: any) {
            return CmsApiFp(configuration).widgetUpdate(entry, options)(axios, basePath);
        },
    };
};

/**
 * CmsApi - object-oriented interface
 * @export
 * @class CmsApi
 * @extends {BaseAPI}
 */
export class CmsApi extends BaseAPI {
    /**
     * 
     * @param {CreateArticleDto} entry 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public articleCreate(entry: CreateArticleDto, options?: any) {
        return CmsApiFp(this.configuration).articleCreate(entry, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public articleFindOne(id: string, options?: any) {
        return CmsApiFp(this.configuration).articleFindOne(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [keyword] 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public articleQuery(keyword?: string, page?: number, size?: number, sort?: string, options?: any) {
        return CmsApiFp(this.configuration).articleQuery(keyword, page, size, sort, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public articleRemove(id: string, options?: any) {
        return CmsApiFp(this.configuration).articleRemove(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [keyword] 
     * @param {string} [value] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public articleSearch(keyword?: string, value?: string, options?: any) {
        return CmsApiFp(this.configuration).articleSearch(keyword, value, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {EditArticleDto} entry 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public articleUpdate(entry: EditArticleDto, options?: any) {
        return CmsApiFp(this.configuration).articleUpdate(entry, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {CreateCategoryDto} entry 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public categoryCreate(entry: CreateCategoryDto, options?: any) {
        return CmsApiFp(this.configuration).categoryCreate(entry, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public categoryFindOne(id: string, options?: any) {
        return CmsApiFp(this.configuration).categoryFindOne(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [keyword] 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public categoryQuery(keyword?: string, page?: number, size?: number, sort?: string, options?: any) {
        return CmsApiFp(this.configuration).categoryQuery(keyword, page, size, sort, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public categoryRemove(id: string, options?: any) {
        return CmsApiFp(this.configuration).categoryRemove(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [keyword] 
     * @param {string} [value] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public categorySearch(keyword?: string, value?: string, options?: any) {
        return CmsApiFp(this.configuration).categorySearch(keyword, value, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [keyword] 
     * @param {string} [value] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public categorySearchTree(keyword?: string, value?: string, options?: any) {
        return CmsApiFp(this.configuration).categorySearchTree(keyword, value, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {EditCategoryDto} entry 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public categoryUpdate(entry: EditCategoryDto, options?: any) {
        return CmsApiFp(this.configuration).categoryUpdate(entry, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {CreateMediaDto} entry 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public mediaCreate(entry: CreateMediaDto, options?: any) {
        return CmsApiFp(this.configuration).mediaCreate(entry, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public mediaFindOne(id: string, options?: any) {
        return CmsApiFp(this.configuration).mediaFindOne(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [keyword] 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public mediaQuery(keyword?: string, page?: number, size?: number, sort?: string, options?: any) {
        return CmsApiFp(this.configuration).mediaQuery(keyword, page, size, sort, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public mediaRemove(id: string, options?: any) {
        return CmsApiFp(this.configuration).mediaRemove(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [keyword] 
     * @param {string} [value] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public mediaSearch(keyword?: string, value?: string, options?: any) {
        return CmsApiFp(this.configuration).mediaSearch(keyword, value, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {EditMediaDto} entry 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public mediaUpdate(entry: EditMediaDto, options?: any) {
        return CmsApiFp(this.configuration).mediaUpdate(entry, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {MediaFile} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public mediaUploadFile(file: MediaFile, options?: any) {
        return CmsApiFp(this.configuration).mediaUploadFile(file, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {Array<string>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public mediaUploadFiles(files?: Array<string>, options?: any) {
        return CmsApiFp(this.configuration).mediaUploadFiles(files, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {CreatePageReq} entry 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public pageCreate(entry: CreatePageReq, options?: any) {
        return CmsApiFp(this.configuration).pageCreate(entry, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public pageFindOne(id: string, options?: any) {
        return CmsApiFp(this.configuration).pageFindOne(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [keyword] 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public pageQuery(keyword?: string, page?: number, size?: number, sort?: string, options?: any) {
        return CmsApiFp(this.configuration).pageQuery(keyword, page, size, sort, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public pageRemove(id: string, options?: any) {
        return CmsApiFp(this.configuration).pageRemove(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [keyword] 
     * @param {string} [value] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public pageSearch(keyword?: string, value?: string, options?: any) {
        return CmsApiFp(this.configuration).pageSearch(keyword, value, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {EditPageReq} entry 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public pageUpdate(entry: EditPageReq, options?: any) {
        return CmsApiFp(this.configuration).pageUpdate(entry, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {CreatePhotoDto} entry 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public photoCreate(entry: CreatePhotoDto, options?: any) {
        return CmsApiFp(this.configuration).photoCreate(entry, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public photoFindOne(id: string, options?: any) {
        return CmsApiFp(this.configuration).photoFindOne(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [keyword] 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public photoQuery(keyword?: string, page?: number, size?: number, sort?: string, options?: any) {
        return CmsApiFp(this.configuration).photoQuery(keyword, page, size, sort, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public photoRemove(id: string, options?: any) {
        return CmsApiFp(this.configuration).photoRemove(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [keyword] 
     * @param {string} [value] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public photoSearch(keyword?: string, value?: string, options?: any) {
        return CmsApiFp(this.configuration).photoSearch(keyword, value, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {EditPhotoDto} entry 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public photoUpdate(entry: EditPhotoDto, options?: any) {
        return CmsApiFp(this.configuration).photoUpdate(entry, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {CreateWidgetDto} entry 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public widgetCreate(entry: CreateWidgetDto, options?: any) {
        return CmsApiFp(this.configuration).widgetCreate(entry, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public widgetFindOne(id: string, options?: any) {
        return CmsApiFp(this.configuration).widgetFindOne(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [keyword] 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public widgetQuery(keyword?: string, page?: number, size?: number, sort?: string, options?: any) {
        return CmsApiFp(this.configuration).widgetQuery(keyword, page, size, sort, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public widgetRemove(id: string, options?: any) {
        return CmsApiFp(this.configuration).widgetRemove(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [keyword] 
     * @param {string} [value] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public widgetSearch(keyword?: string, value?: string, options?: any) {
        return CmsApiFp(this.configuration).widgetSearch(keyword, value, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {EditWidgetDto} entry 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public widgetUpdate(entry: EditWidgetDto, options?: any) {
        return CmsApiFp(this.configuration).widgetUpdate(entry, options)(this.axios, this.basePath);
    }

}


/**
 * MockApi - axios parameter creator
 * @export
 */
export const MockApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mockInitData(options: any = {}): RequestArgs {
            const localVarPath = `/mock/init`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mockReset(options: any = {}): RequestArgs {
            const localVarPath = `/mock/reset`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MockApi - functional programming interface
 * @export
 */
export const MockApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mockInitData(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = MockApiAxiosParamCreator(configuration).mockInitData(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mockReset(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = MockApiAxiosParamCreator(configuration).mockReset(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MockApi - factory interface
 * @export
 */
export const MockApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mockInitData(options?: any) {
            return MockApiFp(configuration).mockInitData(options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mockReset(options?: any) {
            return MockApiFp(configuration).mockReset(options)(axios, basePath);
        },
    };
};

/**
 * MockApi - object-oriented interface
 * @export
 * @class MockApi
 * @extends {BaseAPI}
 */
export class MockApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MockApi
     */
    public mockInitData(options?: any) {
        return MockApiFp(this.configuration).mockInitData(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MockApi
     */
    public mockReset(options?: any) {
        return MockApiFp(this.configuration).mockReset(options)(this.axios, this.basePath);
    }

}


