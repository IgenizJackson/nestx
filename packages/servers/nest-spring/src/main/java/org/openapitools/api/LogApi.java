/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Log;
import org.openapitools.model.ResultListLog;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-05-14T08:00:41.276Z[Etc/UTC]")

@Validated
@Api(value = "log", description = "the log API")
public interface LogApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "", nickname = "logsFindOne", notes = "", response = Log.class, tags={ "core", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Log.class) })
    @RequestMapping(value = "/log/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Log> logsFindOne(@ApiParam(value = "",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"result\" : 0.80082819046101150206595775671303272247314453125,  \"elapsed\" : 6.02745618307040320615897144307382404804229736328125,  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",  \"ip\" : \"ip\",  \"name\" : \"name\",  \"comment\" : \"comment\",  \"id\" : \"id\",  \"operatorName\" : \"operatorName\",  \"operation\" : \"operation\",  \"operator\" : \"operator\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "logsQuery", notes = "", response = ResultListLog.class, tags={ "core", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ResultListLog.class) })
    @RequestMapping(value = "/log/query",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResultListLog> logsQuery(@ApiParam(value = "") @Valid @RequestParam(value = "keyword", required = false) String keyword,@ApiParam(value = "", defaultValue = "1.0d") @Valid @RequestParam(value = "page", required = false, defaultValue="1.0d") Double page,@ApiParam(value = "", defaultValue = "10.0d") @Valid @RequestParam(value = "size", required = false, defaultValue="10.0d") Double size,@ApiParam(value = "") @Valid @RequestParam(value = "sort", required = false) String sort) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"query\" : {    \"size\" : 6.02745618307040320615897144307382404804229736328125,    \"page\" : 1.46581298050294517310021547018550336360931396484375  },  \"count\" : 1.46581298050294517310021547018550336360931396484375,  \"list\" : [ {    \"result\" : 0.80082819046101150206595775671303272247314453125,    \"elapsed\" : 6.02745618307040320615897144307382404804229736328125,    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",    \"ip\" : \"ip\",    \"name\" : \"name\",    \"comment\" : \"comment\",    \"id\" : \"id\",    \"operatorName\" : \"operatorName\",    \"operation\" : \"operation\",    \"operator\" : \"operator\"  }, {    \"result\" : 0.80082819046101150206595775671303272247314453125,    \"elapsed\" : 6.02745618307040320615897144307382404804229736328125,    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",    \"ip\" : \"ip\",    \"name\" : \"name\",    \"comment\" : \"comment\",    \"id\" : \"id\",    \"operatorName\" : \"operatorName\",    \"operation\" : \"operation\",    \"operator\" : \"operator\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
