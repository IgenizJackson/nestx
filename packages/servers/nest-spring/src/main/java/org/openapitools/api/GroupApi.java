/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.CreateGroupReq;
import org.openapitools.model.EditGroupReq;
import org.openapitools.model.Group;
import org.openapitools.model.GroupedUsersRes;
import org.openapitools.model.KeyValueDto;
import org.openapitools.model.ResultListGroup;
import org.openapitools.model.TreeNode;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-06-14T14:09:29.012Z[Etc/UTC]")

@Validated
@Api(value = "group", description = "the group API")
public interface GroupApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "", nickname = "groupsCreate", notes = "", tags={ "core", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No content") })
    @RequestMapping(value = "/group/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> groupsCreate(@ApiParam(value = "" ,required=true )  @Valid @RequestBody CreateGroupReq entry) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "groupsFindOne", notes = "", response = Group.class, tags={ "core", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Group.class) })
    @RequestMapping(value = "/group/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Group> groupsFindOne(@ApiParam(value = "",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"parent\" : \"parent\",  \"paths\" : [ \"{}\", \"{}\" ],  \"director\" : \"director\",  \"name\" : \"name\",  \"icon\" : \"icon\",  \"description\" : \"description\",  \"outid\" : 0.8008281904610115,  \"id\" : \"id\",  \"isRegion\" : true,  \"order\" : 6.027456183070403}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "groupsGetGroupedUsers", notes = "", response = GroupedUsersRes.class, tags={ "core", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = GroupedUsersRes.class) })
    @RequestMapping(value = "/group/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<GroupedUsersRes> groupsGetGroupedUsers(@ApiParam(value = "") @Valid @RequestParam(value = "parent", required = false) String parent) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"groups\" : [ {    \"parent\" : \"parent\",    \"name\" : \"name\",    \"icon\" : \"icon\",    \"id\" : \"id\",    \"isRegion\" : true  }, {    \"parent\" : \"parent\",    \"name\" : \"name\",    \"icon\" : \"icon\",    \"id\" : \"id\",    \"isRegion\" : true  } ],  \"users\" : [ {    \"name\" : \"name\",    \"groups\" : [ \"groups\", \"groups\" ],    \"id\" : \"id\"  }, {    \"name\" : \"name\",    \"groups\" : [ \"groups\", \"groups\" ],    \"id\" : \"id\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "groupsQuery", notes = "", response = ResultListGroup.class, tags={ "core", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ResultListGroup.class) })
    @RequestMapping(value = "/group/query",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResultListGroup> groupsQuery(@ApiParam(value = "") @Valid @RequestParam(value = "keyword", required = false) String keyword,@ApiParam(value = "", defaultValue = "1.0d") @Valid @RequestParam(value = "page", required = false, defaultValue="1.0d") Double page,@ApiParam(value = "", defaultValue = "10.0d") @Valid @RequestParam(value = "size", required = false, defaultValue="10.0d") Double size,@ApiParam(value = "") @Valid @RequestParam(value = "sort", required = false) String sort) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"query\" : {    \"size\" : 6.027456183070403,    \"page\" : 1.4658129805029452  },  \"count\" : 0.8008281904610115,  \"list\" : [ {    \"parent\" : \"parent\",    \"paths\" : [ \"{}\", \"{}\" ],    \"director\" : \"director\",    \"name\" : \"name\",    \"icon\" : \"icon\",    \"description\" : \"description\",    \"outid\" : 0.8008281904610115,    \"id\" : \"id\",    \"isRegion\" : true,    \"order\" : 6.027456183070403  }, {    \"parent\" : \"parent\",    \"paths\" : [ \"{}\", \"{}\" ],    \"director\" : \"director\",    \"name\" : \"name\",    \"icon\" : \"icon\",    \"description\" : \"description\",    \"outid\" : 0.8008281904610115,    \"id\" : \"id\",    \"isRegion\" : true,    \"order\" : 6.027456183070403  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "groupsSearch", notes = "", response = KeyValueDto.class, responseContainer = "List", tags={ "core", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = KeyValueDto.class, responseContainer = "List") })
    @RequestMapping(value = "/group/search",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<KeyValueDto>> groupsSearch(@ApiParam(value = "") @Valid @RequestParam(value = "keyword", required = false) String keyword,@ApiParam(value = "") @Valid @RequestParam(value = "value", required = false) String value) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"label\" : \"label\",  \"value\" : \"value\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "groupsSearchTree", notes = "", response = TreeNode.class, responseContainer = "List", tags={ "core", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = TreeNode.class, responseContainer = "List") })
    @RequestMapping(value = "/group/tree",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<TreeNode>> groupsSearchTree(@ApiParam(value = "") @Valid @RequestParam(value = "keyword", required = false) String keyword,@ApiParam(value = "") @Valid @RequestParam(value = "value", required = false) String value) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"parent\" : \"parent\",  \"icon\" : \"icon\",  \"id\" : \"id\",  \"type\" : \"type\",  \"title\" : \"title\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "groupsUpdate", notes = "", response = Group.class, tags={ "core", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Group.class) })
    @RequestMapping(value = "/group/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Group> groupsUpdate(@ApiParam(value = "" ,required=true )  @Valid @RequestBody EditGroupReq entry) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"parent\" : \"parent\",  \"paths\" : [ \"{}\", \"{}\" ],  \"director\" : \"director\",  \"name\" : \"name\",  \"icon\" : \"icon\",  \"description\" : \"description\",  \"outid\" : 0.8008281904610115,  \"id\" : \"id\",  \"isRegion\" : true,  \"order\" : 6.027456183070403}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
