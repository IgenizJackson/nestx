/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.CreateMenuReq;
import org.openapitools.model.EditMenuReq;
import org.openapitools.model.InlineResponse2001;
import org.openapitools.model.KeyValueDto;
import org.openapitools.model.Menu;
import org.openapitools.model.MenuRes;
import org.openapitools.model.ResultListMenu;
import org.openapitools.model.TreeNode;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-06-14T14:09:29.012Z[Etc/UTC]")

@Validated
@Api(value = "menu", description = "the menu API")
public interface MenuApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "", nickname = "menusCreate", notes = "", tags={ "core", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No content") })
    @RequestMapping(value = "/menu/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> menusCreate(@ApiParam(value = "" ,required=true )  @Valid @RequestBody CreateMenuReq entry) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "menusFindOne", notes = "", response = MenuRes.class, tags={ "core", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = MenuRes.class) })
    @RequestMapping(value = "/menu/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<MenuRes> menusFindOne(@ApiParam(value = "",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"parent\" : \"parent\",  \"blank\" : true,  \"externalLink\" : \"externalLink\",  \"link\" : \"link\",  \"icon\" : \"icon\",  \"badgeDot\" : \"badgeDot\",  \"badgeStatus\" : \"badgeStatus\",  \"acl\" : \"acl\",  \"isMenu\" : true,  \"badge\" : \"badge\",  \"expanded\" : true,  \"enable\" : true,  \"paths\" : [ \"{}\", \"{}\" ],  \"permissions\" : [ \"{}\", \"{}\" ],  \"name\" : \"name\",  \"id\" : \"id\",  \"slug\" : \"slug\",  \"group\" : true,  \"order\" : 0.8008281904610115}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "menusGetPermissionTags", notes = "", response = InlineResponse2001.class, responseContainer = "List", tags={ "core", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = InlineResponse2001.class, responseContainer = "List") })
    @RequestMapping(value = "/menu/permissions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<InlineResponse2001>> menusGetPermissionTags() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"name\" : \"name\",  \"id\" : \"id\",  \"desc\" : \"desc\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "menusGetUserMenus", notes = "", response = MenuRes.class, responseContainer = "List", tags={ "core", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = MenuRes.class, responseContainer = "List") })
    @RequestMapping(value = "/menu/auth",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<MenuRes>> menusGetUserMenus() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"parent\" : \"parent\",  \"blank\" : true,  \"externalLink\" : \"externalLink\",  \"link\" : \"link\",  \"icon\" : \"icon\",  \"badgeDot\" : \"badgeDot\",  \"badgeStatus\" : \"badgeStatus\",  \"acl\" : \"acl\",  \"isMenu\" : true,  \"badge\" : \"badge\",  \"expanded\" : true,  \"enable\" : true,  \"paths\" : [ \"{}\", \"{}\" ],  \"permissions\" : [ \"{}\", \"{}\" ],  \"name\" : \"name\",  \"id\" : \"id\",  \"slug\" : \"slug\",  \"group\" : true,  \"order\" : 0.8008281904610115}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "menusQuery", notes = "", response = ResultListMenu.class, tags={ "core", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ResultListMenu.class) })
    @RequestMapping(value = "/menu/query",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResultListMenu> menusQuery(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "isMenu", required = true) Boolean isMenu,@ApiParam(value = "") @Valid @RequestParam(value = "keyword", required = false) String keyword,@ApiParam(value = "", defaultValue = "1.0d") @Valid @RequestParam(value = "page", required = false, defaultValue="1.0d") Double page,@ApiParam(value = "", defaultValue = "10.0d") @Valid @RequestParam(value = "size", required = false, defaultValue="10.0d") Double size,@ApiParam(value = "") @Valid @RequestParam(value = "sort", required = false) String sort) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"query\" : {    \"size\" : 6.027456183070403,    \"page\" : 1.4658129805029452  },  \"count\" : 0.8008281904610115,  \"list\" : [ {    \"parent\" : \"{}\",    \"blank\" : true,    \"externalLink\" : \"externalLink\",    \"link\" : \"link\",    \"icon\" : \"icon\",    \"badgeDot\" : \"badgeDot\",    \"badgeStatus\" : \"badgeStatus\",    \"acl\" : \"acl\",    \"isMenu\" : true,    \"badge\" : \"badge\",    \"expanded\" : true,    \"enable\" : true,    \"paths\" : [ \"{}\", \"{}\" ],    \"permissions\" : [ \"{}\", \"{}\" ],    \"name\" : \"name\",    \"id\" : \"id\",    \"slug\" : \"slug\",    \"group\" : true,    \"order\" : 0.8008281904610115  }, {    \"parent\" : \"{}\",    \"blank\" : true,    \"externalLink\" : \"externalLink\",    \"link\" : \"link\",    \"icon\" : \"icon\",    \"badgeDot\" : \"badgeDot\",    \"badgeStatus\" : \"badgeStatus\",    \"acl\" : \"acl\",    \"isMenu\" : true,    \"badge\" : \"badge\",    \"expanded\" : true,    \"enable\" : true,    \"paths\" : [ \"{}\", \"{}\" ],    \"permissions\" : [ \"{}\", \"{}\" ],    \"name\" : \"name\",    \"id\" : \"id\",    \"slug\" : \"slug\",    \"group\" : true,    \"order\" : 0.8008281904610115  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "menusSearch", notes = "", response = KeyValueDto.class, responseContainer = "List", tags={ "core", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = KeyValueDto.class, responseContainer = "List") })
    @RequestMapping(value = "/menu/search",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<KeyValueDto>> menusSearch(@ApiParam(value = "") @Valid @RequestParam(value = "keyword", required = false) String keyword,@ApiParam(value = "") @Valid @RequestParam(value = "value", required = false) String value) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"label\" : \"label\",  \"value\" : \"value\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "menusSearchTree", notes = "", response = TreeNode.class, responseContainer = "List", tags={ "core", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = TreeNode.class, responseContainer = "List") })
    @RequestMapping(value = "/menu/tree",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<TreeNode>> menusSearchTree(@ApiParam(value = "") @Valid @RequestParam(value = "keyword", required = false) String keyword,@ApiParam(value = "") @Valid @RequestParam(value = "value", required = false) String value) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"parent\" : \"parent\",  \"icon\" : \"icon\",  \"id\" : \"id\",  \"type\" : \"type\",  \"title\" : \"title\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "menusUpdate", notes = "", response = Menu.class, tags={ "core", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Menu.class) })
    @RequestMapping(value = "/menu/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Menu> menusUpdate(@ApiParam(value = "" ,required=true )  @Valid @RequestBody EditMenuReq entry) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"parent\" : \"{}\",  \"blank\" : true,  \"externalLink\" : \"externalLink\",  \"link\" : \"link\",  \"icon\" : \"icon\",  \"badgeDot\" : \"badgeDot\",  \"badgeStatus\" : \"badgeStatus\",  \"acl\" : \"acl\",  \"isMenu\" : true,  \"badge\" : \"badge\",  \"expanded\" : true,  \"enable\" : true,  \"paths\" : [ \"{}\", \"{}\" ],  \"permissions\" : [ \"{}\", \"{}\" ],  \"name\" : \"name\",  \"id\" : \"id\",  \"slug\" : \"slug\",  \"group\" : true,  \"order\" : 0.8008281904610115}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
