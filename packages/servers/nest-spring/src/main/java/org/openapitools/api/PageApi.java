/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.CreatePageReq;
import org.openapitools.model.EditPageReq;
import org.openapitools.model.KeyValue;
import org.openapitools.model.PageRes;
import org.openapitools.model.ResultListPageRes;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-04-22T03:09:30.309Z[GMT]")

@Validated
@Api(value = "page", description = "the page API")
public interface PageApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "", nickname = "pageCreate", notes = "", response = PageRes.class, tags={ "cms", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = PageRes.class) })
    @RequestMapping(value = "/page/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<PageRes> pageCreate(@ApiParam(value = "" ,required=true )  @Valid @RequestBody CreatePageReq entry) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"template\" : \"template\",  \"disable\" : true,  \"meta\" : \"meta\",  \"publish\" : \"publish\",  \"name\" : \"name\",  \"description\" : \"description\",  \"id\" : \"id\",  \"sort\" : 0.8008281904610115,  \"title\" : \"title\",  \"content\" : \"content\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "pageFindOne", notes = "", response = PageRes.class, tags={ "cms", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = PageRes.class) })
    @RequestMapping(value = "/page/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PageRes> pageFindOne(@ApiParam(value = "",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"template\" : \"template\",  \"disable\" : true,  \"meta\" : \"meta\",  \"publish\" : \"publish\",  \"name\" : \"name\",  \"description\" : \"description\",  \"id\" : \"id\",  \"sort\" : 0.8008281904610115,  \"title\" : \"title\",  \"content\" : \"content\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "pageQuery", notes = "", response = ResultListPageRes.class, tags={ "cms", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ResultListPageRes.class) })
    @RequestMapping(value = "/page/query",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResultListPageRes> pageQuery(@ApiParam(value = "") @Valid @RequestParam(value = "keyword", required = false) String keyword,@ApiParam(value = "", defaultValue = "1.0d") @Valid @RequestParam(value = "page", required = false, defaultValue="1.0d") Double page,@ApiParam(value = "", defaultValue = "10.0d") @Valid @RequestParam(value = "size", required = false, defaultValue="10.0d") Double size,@ApiParam(value = "") @Valid @RequestParam(value = "sort", required = false) String sort) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"query\" : {    \"size\" : 6.027456183070403,    \"page\" : 1.4658129805029452  },  \"count\" : 0.8008281904610115,  \"list\" : [ {    \"template\" : \"template\",    \"disable\" : true,    \"meta\" : \"meta\",    \"publish\" : \"publish\",    \"name\" : \"name\",    \"description\" : \"description\",    \"id\" : \"id\",    \"sort\" : 0.8008281904610115,    \"title\" : \"title\",    \"content\" : \"content\"  }, {    \"template\" : \"template\",    \"disable\" : true,    \"meta\" : \"meta\",    \"publish\" : \"publish\",    \"name\" : \"name\",    \"description\" : \"description\",    \"id\" : \"id\",    \"sort\" : 0.8008281904610115,    \"title\" : \"title\",    \"content\" : \"content\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "pageRemove", notes = "", response = Boolean.class, tags={ "cms", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Boolean.class) })
    @RequestMapping(value = "/page/{id}",
        produces = { "text/html" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Boolean> pageRemove(@ApiParam(value = "",required=true) @PathVariable("id") String id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "pageSearch", notes = "", response = KeyValue.class, responseContainer = "List", tags={ "cms", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = KeyValue.class, responseContainer = "List") })
    @RequestMapping(value = "/page/search",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<KeyValue>> pageSearch(@ApiParam(value = "") @Valid @RequestParam(value = "keyword", required = false) String keyword,@ApiParam(value = "") @Valid @RequestParam(value = "value", required = false) String value) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"label\" : \"label\",  \"value\" : \"value\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "pageUpdate", notes = "", response = PageRes.class, tags={ "cms", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = PageRes.class) })
    @RequestMapping(value = "/page/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<PageRes> pageUpdate(@ApiParam(value = "" ,required=true )  @Valid @RequestBody EditPageReq entry) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"template\" : \"template\",  \"disable\" : true,  \"meta\" : \"meta\",  \"publish\" : \"publish\",  \"name\" : \"name\",  \"description\" : \"description\",  \"id\" : \"id\",  \"sort\" : 0.8008281904610115,  \"title\" : \"title\",  \"content\" : \"content\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
